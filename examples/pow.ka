// examples/pow.S
%agent: UNIT(
    next[prev.UNIT],
    prev[next.UNIT, rbx.MACHINE, rax.MACHINE, rcx.MACHINE, _cpy.MACHINE, rdx.MACHINE, _mul1.MACHINE, _mul2.MACHINE],
    r{_none, rbx, rax, rcx, _cpy, rdx, _mul1, _mul2}
)
%agent: MACHINE(
    ip[cm.PROG],
    state{run, next, bind},
    rbx[prev.UNIT],
    rax[prev.UNIT],
    rcx[prev.UNIT],
    _cpy[prev.UNIT],
    rdx[prev.UNIT],
    _mul1[prev.UNIT],
    _mul2[prev.UNIT],
    target{_none, start, exp_zero, exp_nonzero, _cpy_1, exp_loop, _cpy_2, _cpy_3, _mov_1_loop, _cpy_4, _mov_1_after, exp_after}
)
%agent: PROG(
    prev[next.PROG],
    next[prev.PROG],
    cm[ip.MACHINE],
    ins[prog.ADD, prog.CLR, prog.DEC, prog.INC, prog.JMP, prog.JNZ, prog.JZ, prog.LBL, prog.MOV, prog.SWP]
)
%agent: ADD(
    prog[ins.PROG],
    src{rbx, rax, rcx, _cpy, rdx, _mul1, _mul2},
    dst{rbx, rax, rcx, _cpy, rdx, _mul1, _mul2}
)
%agent: CLR(
    prog[ins.PROG],
    r{rbx, rax, rcx, _cpy, rdx, _mul1, _mul2}
)
%agent: DEC(
    prog[ins.PROG],
    r{rbx, rax, rcx, _cpy, rdx, _mul1, _mul2}
)
%agent: INC(
    prog[ins.PROG],
    r{rbx, rax, rcx, _cpy, rdx, _mul1, _mul2}
)
%agent: JMP(
    prog[ins.PROG],
    l{start, exp_zero, exp_nonzero, _cpy_1, exp_loop, _cpy_2, _cpy_3, _mov_1_loop, _cpy_4, _mov_1_after, exp_after}
)
%agent: JNZ(
    prog[ins.PROG],
    r{rbx, rax, rcx, _cpy, rdx, _mul1, _mul2},
    l{start, exp_zero, exp_nonzero, _cpy_1, exp_loop, _cpy_2, _cpy_3, _mov_1_loop, _cpy_4, _mov_1_after, exp_after}
)
%agent: JZ(
    prog[ins.PROG],
    r{rbx, rax, rcx, _cpy, rdx, _mul1, _mul2},
    l{start, exp_zero, exp_nonzero, _cpy_1, exp_loop, _cpy_2, _cpy_3, _mov_1_loop, _cpy_4, _mov_1_after, exp_after}
)
%agent: LBL(
    prog[ins.PROG],
    l{start, exp_zero, exp_nonzero, _cpy_1, exp_loop, _cpy_2, _cpy_3, _mov_1_loop, _cpy_4, _mov_1_after, exp_after}
)
%agent: MOV(
    prog[ins.PROG],
    src{rbx, rax, rcx, _cpy, rdx, _mul1, _mul2},
    dst{rbx, rax, rcx, _cpy, rdx, _mul1, _mul2}
)
%agent: SWP(
    prog[ins.PROG],
    src{rbx, rax, rcx, _cpy, rdx, _mul1, _mul2},
    dst{rbx, rax, rcx, _cpy, rdx, _mul1, _mul2}
)

'move'
    MACHINE(ip[0], state{next}),
    PROG(cm[0], next[1]),
    PROG(cm[.], prev[1])
->
    MACHINE(ip[0], state{run}),
    PROG(cm[.], next[1]),
    PROG(cm[0], prev[1])
@ 1
'reset_units'
    UNIT(prev[.], next[0], r{#}),
    UNIT(prev[0], r{#})
->
    UNIT(prev[.], next[.], r{_none}),
    UNIT(prev[.], r{_none})
@ inf
'label'
    MACHINE(ip[0], state{run}),
    PROG(cm[0], ins[1]),
    LBL(prog[1])
->
    MACHINE(ip[0], state{next}),
    PROG(cm[0], ins[1]),
    LBL(prog[1])
@ 1
'clr(rbx) | rbx == 0'
    MACHINE(ip[0], state{run}, rbx[.]),
    PROG(cm[0], ins[1]),
    CLR(prog[1], r{rbx})
->
    MACHINE(ip[0], state{next}, rbx[.]),
    PROG(cm[0], ins[1]),
    CLR(prog[1], r{rbx})
@ 1
'clr(rbx) | rbx == 1'
    MACHINE(ip[0], state{run}, rbx[2]),
    PROG(cm[0], ins[1]),
    CLR(prog[1], r{rbx}),
    UNIT(prev[2], r{rbx})
->
    MACHINE(ip[0], state{next}, rbx[.]),
    PROG(cm[0], ins[1]),
    CLR(prog[1], r{rbx}),
    UNIT(prev[.], r{_none})
@ 1
'dec(rbx) | rbx == 0'
    MACHINE(ip[0], state{run}, rbx[.]),
    PROG(cm[0], ins[1]),
    DEC(prog[1], r{rbx})
->
    MACHINE(ip[0], state{next}, rbx[.]),
    PROG(cm[0], ins[1]),
    DEC(prog[1], r{rbx})
@ 1
'dec(rbx) | rbx == 1'
    MACHINE(ip[0], state{run}, rbx[2]),
    PROG(cm[0], ins[1]),
    DEC(prog[1], r{rbx}),
    UNIT(prev[2], next[.], r{rbx})
->
    MACHINE(ip[0], state{next}, rbx[.]),
    PROG(cm[0], ins[1]),
    DEC(prog[1], r{rbx}),
    UNIT(prev[.], next[.], r{_none})
@ 1
'dec(rbx) | rbx >= 2'
    MACHINE(ip[0], state{run}, rbx[2]),
    PROG(cm[0], ins[1]),
    DEC(prog[1], r{rbx}),
    UNIT(prev[2], next[3], r{rbx}),
    UNIT(prev[3])
->
    MACHINE(ip[0], state{next}, rbx[3]),
    PROG(cm[0], ins[1]),
    DEC(prog[1], r{rbx}),
    UNIT(prev[.], next[.], r{_none}),
    UNIT(prev[3])
@ 1
'inc(rbx) | rbx != 0'
    MACHINE(ip[0], state{run}, rbx[2]),
    PROG(cm[0], ins[1]),
    INC(prog[1], r{rbx}),
    UNIT(prev[2]),
    UNIT(prev[.], next[.], r{_none})
->
    MACHINE(ip[0], state{next}, rbx[2]),
    PROG(cm[0], ins[1]),
    INC(prog[1], r{rbx}),
    UNIT(prev[3]),
    UNIT(prev[2], next[3], r{rbx})
@ 1
'inc(rbx) | rbx == 0'
    MACHINE(ip[0], state{run}, rbx[.]),
    PROG(cm[0], ins[1]),
    INC(prog[1], r{rbx}),
    UNIT(prev[.], next[.], r{_none})
->
    MACHINE(ip[0], state{next}, rbx[2]),
    PROG(cm[0], ins[1]),
    INC(prog[1], r{rbx}),
    UNIT(prev[2], next[.], r{rbx})
@ 1
'jnz(rbx, *) | rbx != 0'
    MACHINE(ip[0], state{run}, rbx[.]),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rbx})
->
    MACHINE(ip[0], state{next}, rbx[.]),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rbx})
@ 1
'jz(rbx, *) | rbx != 0'
    MACHINE(ip[0], state{run}, rbx[_]),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rbx})
->
    MACHINE(ip[0], state{next}, rbx[_]),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rbx})
@ 1
'clr(rax) | rax == 0'
    MACHINE(ip[0], state{run}, rax[.]),
    PROG(cm[0], ins[1]),
    CLR(prog[1], r{rax})
->
    MACHINE(ip[0], state{next}, rax[.]),
    PROG(cm[0], ins[1]),
    CLR(prog[1], r{rax})
@ 1
'clr(rax) | rax == 1'
    MACHINE(ip[0], state{run}, rax[2]),
    PROG(cm[0], ins[1]),
    CLR(prog[1], r{rax}),
    UNIT(prev[2], r{rax})
->
    MACHINE(ip[0], state{next}, rax[.]),
    PROG(cm[0], ins[1]),
    CLR(prog[1], r{rax}),
    UNIT(prev[.], r{_none})
@ 1
'dec(rax) | rax == 0'
    MACHINE(ip[0], state{run}, rax[.]),
    PROG(cm[0], ins[1]),
    DEC(prog[1], r{rax})
->
    MACHINE(ip[0], state{next}, rax[.]),
    PROG(cm[0], ins[1]),
    DEC(prog[1], r{rax})
@ 1
'dec(rax) | rax == 1'
    MACHINE(ip[0], state{run}, rax[2]),
    PROG(cm[0], ins[1]),
    DEC(prog[1], r{rax}),
    UNIT(prev[2], next[.], r{rax})
->
    MACHINE(ip[0], state{next}, rax[.]),
    PROG(cm[0], ins[1]),
    DEC(prog[1], r{rax}),
    UNIT(prev[.], next[.], r{_none})
@ 1
'dec(rax) | rax >= 2'
    MACHINE(ip[0], state{run}, rax[2]),
    PROG(cm[0], ins[1]),
    DEC(prog[1], r{rax}),
    UNIT(prev[2], next[3], r{rax}),
    UNIT(prev[3])
->
    MACHINE(ip[0], state{next}, rax[3]),
    PROG(cm[0], ins[1]),
    DEC(prog[1], r{rax}),
    UNIT(prev[.], next[.], r{_none}),
    UNIT(prev[3])
@ 1
'inc(rax) | rax != 0'
    MACHINE(ip[0], state{run}, rax[2]),
    PROG(cm[0], ins[1]),
    INC(prog[1], r{rax}),
    UNIT(prev[2]),
    UNIT(prev[.], next[.], r{_none})
->
    MACHINE(ip[0], state{next}, rax[2]),
    PROG(cm[0], ins[1]),
    INC(prog[1], r{rax}),
    UNIT(prev[3]),
    UNIT(prev[2], next[3], r{rax})
@ 1
'inc(rax) | rax == 0'
    MACHINE(ip[0], state{run}, rax[.]),
    PROG(cm[0], ins[1]),
    INC(prog[1], r{rax}),
    UNIT(prev[.], next[.], r{_none})
->
    MACHINE(ip[0], state{next}, rax[2]),
    PROG(cm[0], ins[1]),
    INC(prog[1], r{rax}),
    UNIT(prev[2], next[.], r{rax})
@ 1
'jnz(rax, *) | rax != 0'
    MACHINE(ip[0], state{run}, rax[.]),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rax})
->
    MACHINE(ip[0], state{next}, rax[.]),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rax})
@ 1
'jz(rax, *) | rax != 0'
    MACHINE(ip[0], state{run}, rax[_]),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rax})
->
    MACHINE(ip[0], state{next}, rax[_]),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rax})
@ 1
'clr(rcx) | rcx == 0'
    MACHINE(ip[0], state{run}, rcx[.]),
    PROG(cm[0], ins[1]),
    CLR(prog[1], r{rcx})
->
    MACHINE(ip[0], state{next}, rcx[.]),
    PROG(cm[0], ins[1]),
    CLR(prog[1], r{rcx})
@ 1
'clr(rcx) | rcx == 1'
    MACHINE(ip[0], state{run}, rcx[2]),
    PROG(cm[0], ins[1]),
    CLR(prog[1], r{rcx}),
    UNIT(prev[2], r{rcx})
->
    MACHINE(ip[0], state{next}, rcx[.]),
    PROG(cm[0], ins[1]),
    CLR(prog[1], r{rcx}),
    UNIT(prev[.], r{_none})
@ 1
'dec(rcx) | rcx == 0'
    MACHINE(ip[0], state{run}, rcx[.]),
    PROG(cm[0], ins[1]),
    DEC(prog[1], r{rcx})
->
    MACHINE(ip[0], state{next}, rcx[.]),
    PROG(cm[0], ins[1]),
    DEC(prog[1], r{rcx})
@ 1
'dec(rcx) | rcx == 1'
    MACHINE(ip[0], state{run}, rcx[2]),
    PROG(cm[0], ins[1]),
    DEC(prog[1], r{rcx}),
    UNIT(prev[2], next[.], r{rcx})
->
    MACHINE(ip[0], state{next}, rcx[.]),
    PROG(cm[0], ins[1]),
    DEC(prog[1], r{rcx}),
    UNIT(prev[.], next[.], r{_none})
@ 1
'dec(rcx) | rcx >= 2'
    MACHINE(ip[0], state{run}, rcx[2]),
    PROG(cm[0], ins[1]),
    DEC(prog[1], r{rcx}),
    UNIT(prev[2], next[3], r{rcx}),
    UNIT(prev[3])
->
    MACHINE(ip[0], state{next}, rcx[3]),
    PROG(cm[0], ins[1]),
    DEC(prog[1], r{rcx}),
    UNIT(prev[.], next[.], r{_none}),
    UNIT(prev[3])
@ 1
'inc(rcx) | rcx != 0'
    MACHINE(ip[0], state{run}, rcx[2]),
    PROG(cm[0], ins[1]),
    INC(prog[1], r{rcx}),
    UNIT(prev[2]),
    UNIT(prev[.], next[.], r{_none})
->
    MACHINE(ip[0], state{next}, rcx[2]),
    PROG(cm[0], ins[1]),
    INC(prog[1], r{rcx}),
    UNIT(prev[3]),
    UNIT(prev[2], next[3], r{rcx})
@ 1
'inc(rcx) | rcx == 0'
    MACHINE(ip[0], state{run}, rcx[.]),
    PROG(cm[0], ins[1]),
    INC(prog[1], r{rcx}),
    UNIT(prev[.], next[.], r{_none})
->
    MACHINE(ip[0], state{next}, rcx[2]),
    PROG(cm[0], ins[1]),
    INC(prog[1], r{rcx}),
    UNIT(prev[2], next[.], r{rcx})
@ 1
'jnz(rcx, *) | rcx != 0'
    MACHINE(ip[0], state{run}, rcx[.]),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rcx})
->
    MACHINE(ip[0], state{next}, rcx[.]),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rcx})
@ 1
'jz(rcx, *) | rcx != 0'
    MACHINE(ip[0], state{run}, rcx[_]),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rcx})
->
    MACHINE(ip[0], state{next}, rcx[_]),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rcx})
@ 1
'clr(_cpy) | _cpy == 0'
    MACHINE(ip[0], state{run}, _cpy[.]),
    PROG(cm[0], ins[1]),
    CLR(prog[1], r{_cpy})
->
    MACHINE(ip[0], state{next}, _cpy[.]),
    PROG(cm[0], ins[1]),
    CLR(prog[1], r{_cpy})
@ 1
'clr(_cpy) | _cpy == 1'
    MACHINE(ip[0], state{run}, _cpy[2]),
    PROG(cm[0], ins[1]),
    CLR(prog[1], r{_cpy}),
    UNIT(prev[2], r{_cpy})
->
    MACHINE(ip[0], state{next}, _cpy[.]),
    PROG(cm[0], ins[1]),
    CLR(prog[1], r{_cpy}),
    UNIT(prev[.], r{_none})
@ 1
'dec(_cpy) | _cpy == 0'
    MACHINE(ip[0], state{run}, _cpy[.]),
    PROG(cm[0], ins[1]),
    DEC(prog[1], r{_cpy})
->
    MACHINE(ip[0], state{next}, _cpy[.]),
    PROG(cm[0], ins[1]),
    DEC(prog[1], r{_cpy})
@ 1
'dec(_cpy) | _cpy == 1'
    MACHINE(ip[0], state{run}, _cpy[2]),
    PROG(cm[0], ins[1]),
    DEC(prog[1], r{_cpy}),
    UNIT(prev[2], next[.], r{_cpy})
->
    MACHINE(ip[0], state{next}, _cpy[.]),
    PROG(cm[0], ins[1]),
    DEC(prog[1], r{_cpy}),
    UNIT(prev[.], next[.], r{_none})
@ 1
'dec(_cpy) | _cpy >= 2'
    MACHINE(ip[0], state{run}, _cpy[2]),
    PROG(cm[0], ins[1]),
    DEC(prog[1], r{_cpy}),
    UNIT(prev[2], next[3], r{_cpy}),
    UNIT(prev[3])
->
    MACHINE(ip[0], state{next}, _cpy[3]),
    PROG(cm[0], ins[1]),
    DEC(prog[1], r{_cpy}),
    UNIT(prev[.], next[.], r{_none}),
    UNIT(prev[3])
@ 1
'inc(_cpy) | _cpy != 0'
    MACHINE(ip[0], state{run}, _cpy[2]),
    PROG(cm[0], ins[1]),
    INC(prog[1], r{_cpy}),
    UNIT(prev[2]),
    UNIT(prev[.], next[.], r{_none})
->
    MACHINE(ip[0], state{next}, _cpy[2]),
    PROG(cm[0], ins[1]),
    INC(prog[1], r{_cpy}),
    UNIT(prev[3]),
    UNIT(prev[2], next[3], r{_cpy})
@ 1
'inc(_cpy) | _cpy == 0'
    MACHINE(ip[0], state{run}, _cpy[.]),
    PROG(cm[0], ins[1]),
    INC(prog[1], r{_cpy}),
    UNIT(prev[.], next[.], r{_none})
->
    MACHINE(ip[0], state{next}, _cpy[2]),
    PROG(cm[0], ins[1]),
    INC(prog[1], r{_cpy}),
    UNIT(prev[2], next[.], r{_cpy})
@ 1
'jnz(_cpy, *) | _cpy != 0'
    MACHINE(ip[0], state{run}, _cpy[.]),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{_cpy})
->
    MACHINE(ip[0], state{next}, _cpy[.]),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{_cpy})
@ 1
'jz(_cpy, *) | _cpy != 0'
    MACHINE(ip[0], state{run}, _cpy[_]),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{_cpy})
->
    MACHINE(ip[0], state{next}, _cpy[_]),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{_cpy})
@ 1
'clr(rdx) | rdx == 0'
    MACHINE(ip[0], state{run}, rdx[.]),
    PROG(cm[0], ins[1]),
    CLR(prog[1], r{rdx})
->
    MACHINE(ip[0], state{next}, rdx[.]),
    PROG(cm[0], ins[1]),
    CLR(prog[1], r{rdx})
@ 1
'clr(rdx) | rdx == 1'
    MACHINE(ip[0], state{run}, rdx[2]),
    PROG(cm[0], ins[1]),
    CLR(prog[1], r{rdx}),
    UNIT(prev[2], r{rdx})
->
    MACHINE(ip[0], state{next}, rdx[.]),
    PROG(cm[0], ins[1]),
    CLR(prog[1], r{rdx}),
    UNIT(prev[.], r{_none})
@ 1
'dec(rdx) | rdx == 0'
    MACHINE(ip[0], state{run}, rdx[.]),
    PROG(cm[0], ins[1]),
    DEC(prog[1], r{rdx})
->
    MACHINE(ip[0], state{next}, rdx[.]),
    PROG(cm[0], ins[1]),
    DEC(prog[1], r{rdx})
@ 1
'dec(rdx) | rdx == 1'
    MACHINE(ip[0], state{run}, rdx[2]),
    PROG(cm[0], ins[1]),
    DEC(prog[1], r{rdx}),
    UNIT(prev[2], next[.], r{rdx})
->
    MACHINE(ip[0], state{next}, rdx[.]),
    PROG(cm[0], ins[1]),
    DEC(prog[1], r{rdx}),
    UNIT(prev[.], next[.], r{_none})
@ 1
'dec(rdx) | rdx >= 2'
    MACHINE(ip[0], state{run}, rdx[2]),
    PROG(cm[0], ins[1]),
    DEC(prog[1], r{rdx}),
    UNIT(prev[2], next[3], r{rdx}),
    UNIT(prev[3])
->
    MACHINE(ip[0], state{next}, rdx[3]),
    PROG(cm[0], ins[1]),
    DEC(prog[1], r{rdx}),
    UNIT(prev[.], next[.], r{_none}),
    UNIT(prev[3])
@ 1
'inc(rdx) | rdx != 0'
    MACHINE(ip[0], state{run}, rdx[2]),
    PROG(cm[0], ins[1]),
    INC(prog[1], r{rdx}),
    UNIT(prev[2]),
    UNIT(prev[.], next[.], r{_none})
->
    MACHINE(ip[0], state{next}, rdx[2]),
    PROG(cm[0], ins[1]),
    INC(prog[1], r{rdx}),
    UNIT(prev[3]),
    UNIT(prev[2], next[3], r{rdx})
@ 1
'inc(rdx) | rdx == 0'
    MACHINE(ip[0], state{run}, rdx[.]),
    PROG(cm[0], ins[1]),
    INC(prog[1], r{rdx}),
    UNIT(prev[.], next[.], r{_none})
->
    MACHINE(ip[0], state{next}, rdx[2]),
    PROG(cm[0], ins[1]),
    INC(prog[1], r{rdx}),
    UNIT(prev[2], next[.], r{rdx})
@ 1
'jnz(rdx, *) | rdx != 0'
    MACHINE(ip[0], state{run}, rdx[.]),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rdx})
->
    MACHINE(ip[0], state{next}, rdx[.]),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rdx})
@ 1
'jz(rdx, *) | rdx != 0'
    MACHINE(ip[0], state{run}, rdx[_]),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rdx})
->
    MACHINE(ip[0], state{next}, rdx[_]),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rdx})
@ 1
'clr(_mul1) | _mul1 == 0'
    MACHINE(ip[0], state{run}, _mul1[.]),
    PROG(cm[0], ins[1]),
    CLR(prog[1], r{_mul1})
->
    MACHINE(ip[0], state{next}, _mul1[.]),
    PROG(cm[0], ins[1]),
    CLR(prog[1], r{_mul1})
@ 1
'clr(_mul1) | _mul1 == 1'
    MACHINE(ip[0], state{run}, _mul1[2]),
    PROG(cm[0], ins[1]),
    CLR(prog[1], r{_mul1}),
    UNIT(prev[2], r{_mul1})
->
    MACHINE(ip[0], state{next}, _mul1[.]),
    PROG(cm[0], ins[1]),
    CLR(prog[1], r{_mul1}),
    UNIT(prev[.], r{_none})
@ 1
'dec(_mul1) | _mul1 == 0'
    MACHINE(ip[0], state{run}, _mul1[.]),
    PROG(cm[0], ins[1]),
    DEC(prog[1], r{_mul1})
->
    MACHINE(ip[0], state{next}, _mul1[.]),
    PROG(cm[0], ins[1]),
    DEC(prog[1], r{_mul1})
@ 1
'dec(_mul1) | _mul1 == 1'
    MACHINE(ip[0], state{run}, _mul1[2]),
    PROG(cm[0], ins[1]),
    DEC(prog[1], r{_mul1}),
    UNIT(prev[2], next[.], r{_mul1})
->
    MACHINE(ip[0], state{next}, _mul1[.]),
    PROG(cm[0], ins[1]),
    DEC(prog[1], r{_mul1}),
    UNIT(prev[.], next[.], r{_none})
@ 1
'dec(_mul1) | _mul1 >= 2'
    MACHINE(ip[0], state{run}, _mul1[2]),
    PROG(cm[0], ins[1]),
    DEC(prog[1], r{_mul1}),
    UNIT(prev[2], next[3], r{_mul1}),
    UNIT(prev[3])
->
    MACHINE(ip[0], state{next}, _mul1[3]),
    PROG(cm[0], ins[1]),
    DEC(prog[1], r{_mul1}),
    UNIT(prev[.], next[.], r{_none}),
    UNIT(prev[3])
@ 1
'inc(_mul1) | _mul1 != 0'
    MACHINE(ip[0], state{run}, _mul1[2]),
    PROG(cm[0], ins[1]),
    INC(prog[1], r{_mul1}),
    UNIT(prev[2]),
    UNIT(prev[.], next[.], r{_none})
->
    MACHINE(ip[0], state{next}, _mul1[2]),
    PROG(cm[0], ins[1]),
    INC(prog[1], r{_mul1}),
    UNIT(prev[3]),
    UNIT(prev[2], next[3], r{_mul1})
@ 1
'inc(_mul1) | _mul1 == 0'
    MACHINE(ip[0], state{run}, _mul1[.]),
    PROG(cm[0], ins[1]),
    INC(prog[1], r{_mul1}),
    UNIT(prev[.], next[.], r{_none})
->
    MACHINE(ip[0], state{next}, _mul1[2]),
    PROG(cm[0], ins[1]),
    INC(prog[1], r{_mul1}),
    UNIT(prev[2], next[.], r{_mul1})
@ 1
'jnz(_mul1, *) | _mul1 != 0'
    MACHINE(ip[0], state{run}, _mul1[.]),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{_mul1})
->
    MACHINE(ip[0], state{next}, _mul1[.]),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{_mul1})
@ 1
'jz(_mul1, *) | _mul1 != 0'
    MACHINE(ip[0], state{run}, _mul1[_]),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{_mul1})
->
    MACHINE(ip[0], state{next}, _mul1[_]),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{_mul1})
@ 1
'clr(_mul2) | _mul2 == 0'
    MACHINE(ip[0], state{run}, _mul2[.]),
    PROG(cm[0], ins[1]),
    CLR(prog[1], r{_mul2})
->
    MACHINE(ip[0], state{next}, _mul2[.]),
    PROG(cm[0], ins[1]),
    CLR(prog[1], r{_mul2})
@ 1
'clr(_mul2) | _mul2 == 1'
    MACHINE(ip[0], state{run}, _mul2[2]),
    PROG(cm[0], ins[1]),
    CLR(prog[1], r{_mul2}),
    UNIT(prev[2], r{_mul2})
->
    MACHINE(ip[0], state{next}, _mul2[.]),
    PROG(cm[0], ins[1]),
    CLR(prog[1], r{_mul2}),
    UNIT(prev[.], r{_none})
@ 1
'dec(_mul2) | _mul2 == 0'
    MACHINE(ip[0], state{run}, _mul2[.]),
    PROG(cm[0], ins[1]),
    DEC(prog[1], r{_mul2})
->
    MACHINE(ip[0], state{next}, _mul2[.]),
    PROG(cm[0], ins[1]),
    DEC(prog[1], r{_mul2})
@ 1
'dec(_mul2) | _mul2 == 1'
    MACHINE(ip[0], state{run}, _mul2[2]),
    PROG(cm[0], ins[1]),
    DEC(prog[1], r{_mul2}),
    UNIT(prev[2], next[.], r{_mul2})
->
    MACHINE(ip[0], state{next}, _mul2[.]),
    PROG(cm[0], ins[1]),
    DEC(prog[1], r{_mul2}),
    UNIT(prev[.], next[.], r{_none})
@ 1
'dec(_mul2) | _mul2 >= 2'
    MACHINE(ip[0], state{run}, _mul2[2]),
    PROG(cm[0], ins[1]),
    DEC(prog[1], r{_mul2}),
    UNIT(prev[2], next[3], r{_mul2}),
    UNIT(prev[3])
->
    MACHINE(ip[0], state{next}, _mul2[3]),
    PROG(cm[0], ins[1]),
    DEC(prog[1], r{_mul2}),
    UNIT(prev[.], next[.], r{_none}),
    UNIT(prev[3])
@ 1
'inc(_mul2) | _mul2 != 0'
    MACHINE(ip[0], state{run}, _mul2[2]),
    PROG(cm[0], ins[1]),
    INC(prog[1], r{_mul2}),
    UNIT(prev[2]),
    UNIT(prev[.], next[.], r{_none})
->
    MACHINE(ip[0], state{next}, _mul2[2]),
    PROG(cm[0], ins[1]),
    INC(prog[1], r{_mul2}),
    UNIT(prev[3]),
    UNIT(prev[2], next[3], r{_mul2})
@ 1
'inc(_mul2) | _mul2 == 0'
    MACHINE(ip[0], state{run}, _mul2[.]),
    PROG(cm[0], ins[1]),
    INC(prog[1], r{_mul2}),
    UNIT(prev[.], next[.], r{_none})
->
    MACHINE(ip[0], state{next}, _mul2[2]),
    PROG(cm[0], ins[1]),
    INC(prog[1], r{_mul2}),
    UNIT(prev[2], next[.], r{_mul2})
@ 1
'jnz(_mul2, *) | _mul2 != 0'
    MACHINE(ip[0], state{run}, _mul2[.]),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{_mul2})
->
    MACHINE(ip[0], state{next}, _mul2[.]),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{_mul2})
@ 1
'jz(_mul2, *) | _mul2 != 0'
    MACHINE(ip[0], state{run}, _mul2[_]),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{_mul2})
->
    MACHINE(ip[0], state{next}, _mul2[_]),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{_mul2})
@ 1
'bind | target == start'
    MACHINE(ip[.], state{bind}, target{start}),
    PROG(cm[.], ins[0]),
    LBL(prog[0], l{start})
->
    MACHINE(ip[1], state{run}, target{_none}),
    PROG(cm[1], ins[0]),
    LBL(prog[0], l{start})
@ 1
'jmp(start)'
    MACHINE(ip[0], state{run}, target{_none}),
    PROG(cm[0], ins[1]),
    JMP(prog[1], l{start})
->
    MACHINE(ip[.], state{bind}, target{start}),
    PROG(cm[.], ins[1]),
    JMP(prog[1], l{start})
@ 1
'bind | target == exp_zero'
    MACHINE(ip[.], state{bind}, target{exp_zero}),
    PROG(cm[.], ins[0]),
    LBL(prog[0], l{exp_zero})
->
    MACHINE(ip[1], state{run}, target{_none}),
    PROG(cm[1], ins[0]),
    LBL(prog[0], l{exp_zero})
@ 1
'jmp(exp_zero)'
    MACHINE(ip[0], state{run}, target{_none}),
    PROG(cm[0], ins[1]),
    JMP(prog[1], l{exp_zero})
->
    MACHINE(ip[.], state{bind}, target{exp_zero}),
    PROG(cm[.], ins[1]),
    JMP(prog[1], l{exp_zero})
@ 1
'bind | target == exp_nonzero'
    MACHINE(ip[.], state{bind}, target{exp_nonzero}),
    PROG(cm[.], ins[0]),
    LBL(prog[0], l{exp_nonzero})
->
    MACHINE(ip[1], state{run}, target{_none}),
    PROG(cm[1], ins[0]),
    LBL(prog[0], l{exp_nonzero})
@ 1
'jmp(exp_nonzero)'
    MACHINE(ip[0], state{run}, target{_none}),
    PROG(cm[0], ins[1]),
    JMP(prog[1], l{exp_nonzero})
->
    MACHINE(ip[.], state{bind}, target{exp_nonzero}),
    PROG(cm[.], ins[1]),
    JMP(prog[1], l{exp_nonzero})
@ 1
'bind | target == _cpy_1'
    MACHINE(ip[.], state{bind}, target{_cpy_1}),
    PROG(cm[.], ins[0]),
    LBL(prog[0], l{_cpy_1})
->
    MACHINE(ip[1], state{run}, target{_none}),
    PROG(cm[1], ins[0]),
    LBL(prog[0], l{_cpy_1})
@ 1
'jmp(_cpy_1)'
    MACHINE(ip[0], state{run}, target{_none}),
    PROG(cm[0], ins[1]),
    JMP(prog[1], l{_cpy_1})
->
    MACHINE(ip[.], state{bind}, target{_cpy_1}),
    PROG(cm[.], ins[1]),
    JMP(prog[1], l{_cpy_1})
@ 1
'bind | target == exp_loop'
    MACHINE(ip[.], state{bind}, target{exp_loop}),
    PROG(cm[.], ins[0]),
    LBL(prog[0], l{exp_loop})
->
    MACHINE(ip[1], state{run}, target{_none}),
    PROG(cm[1], ins[0]),
    LBL(prog[0], l{exp_loop})
@ 1
'jmp(exp_loop)'
    MACHINE(ip[0], state{run}, target{_none}),
    PROG(cm[0], ins[1]),
    JMP(prog[1], l{exp_loop})
->
    MACHINE(ip[.], state{bind}, target{exp_loop}),
    PROG(cm[.], ins[1]),
    JMP(prog[1], l{exp_loop})
@ 1
'bind | target == _cpy_2'
    MACHINE(ip[.], state{bind}, target{_cpy_2}),
    PROG(cm[.], ins[0]),
    LBL(prog[0], l{_cpy_2})
->
    MACHINE(ip[1], state{run}, target{_none}),
    PROG(cm[1], ins[0]),
    LBL(prog[0], l{_cpy_2})
@ 1
'jmp(_cpy_2)'
    MACHINE(ip[0], state{run}, target{_none}),
    PROG(cm[0], ins[1]),
    JMP(prog[1], l{_cpy_2})
->
    MACHINE(ip[.], state{bind}, target{_cpy_2}),
    PROG(cm[.], ins[1]),
    JMP(prog[1], l{_cpy_2})
@ 1
'bind | target == _cpy_3'
    MACHINE(ip[.], state{bind}, target{_cpy_3}),
    PROG(cm[.], ins[0]),
    LBL(prog[0], l{_cpy_3})
->
    MACHINE(ip[1], state{run}, target{_none}),
    PROG(cm[1], ins[0]),
    LBL(prog[0], l{_cpy_3})
@ 1
'jmp(_cpy_3)'
    MACHINE(ip[0], state{run}, target{_none}),
    PROG(cm[0], ins[1]),
    JMP(prog[1], l{_cpy_3})
->
    MACHINE(ip[.], state{bind}, target{_cpy_3}),
    PROG(cm[.], ins[1]),
    JMP(prog[1], l{_cpy_3})
@ 1
'bind | target == _mov_1_loop'
    MACHINE(ip[.], state{bind}, target{_mov_1_loop}),
    PROG(cm[.], ins[0]),
    LBL(prog[0], l{_mov_1_loop})
->
    MACHINE(ip[1], state{run}, target{_none}),
    PROG(cm[1], ins[0]),
    LBL(prog[0], l{_mov_1_loop})
@ 1
'jmp(_mov_1_loop)'
    MACHINE(ip[0], state{run}, target{_none}),
    PROG(cm[0], ins[1]),
    JMP(prog[1], l{_mov_1_loop})
->
    MACHINE(ip[.], state{bind}, target{_mov_1_loop}),
    PROG(cm[.], ins[1]),
    JMP(prog[1], l{_mov_1_loop})
@ 1
'bind | target == _cpy_4'
    MACHINE(ip[.], state{bind}, target{_cpy_4}),
    PROG(cm[.], ins[0]),
    LBL(prog[0], l{_cpy_4})
->
    MACHINE(ip[1], state{run}, target{_none}),
    PROG(cm[1], ins[0]),
    LBL(prog[0], l{_cpy_4})
@ 1
'jmp(_cpy_4)'
    MACHINE(ip[0], state{run}, target{_none}),
    PROG(cm[0], ins[1]),
    JMP(prog[1], l{_cpy_4})
->
    MACHINE(ip[.], state{bind}, target{_cpy_4}),
    PROG(cm[.], ins[1]),
    JMP(prog[1], l{_cpy_4})
@ 1
'bind | target == _mov_1_after'
    MACHINE(ip[.], state{bind}, target{_mov_1_after}),
    PROG(cm[.], ins[0]),
    LBL(prog[0], l{_mov_1_after})
->
    MACHINE(ip[1], state{run}, target{_none}),
    PROG(cm[1], ins[0]),
    LBL(prog[0], l{_mov_1_after})
@ 1
'jmp(_mov_1_after)'
    MACHINE(ip[0], state{run}, target{_none}),
    PROG(cm[0], ins[1]),
    JMP(prog[1], l{_mov_1_after})
->
    MACHINE(ip[.], state{bind}, target{_mov_1_after}),
    PROG(cm[.], ins[1]),
    JMP(prog[1], l{_mov_1_after})
@ 1
'bind | target == exp_after'
    MACHINE(ip[.], state{bind}, target{exp_after}),
    PROG(cm[.], ins[0]),
    LBL(prog[0], l{exp_after})
->
    MACHINE(ip[1], state{run}, target{_none}),
    PROG(cm[1], ins[0]),
    LBL(prog[0], l{exp_after})
@ 1
'jmp(exp_after)'
    MACHINE(ip[0], state{run}, target{_none}),
    PROG(cm[0], ins[1]),
    JMP(prog[1], l{exp_after})
->
    MACHINE(ip[.], state{bind}, target{exp_after}),
    PROG(cm[.], ins[1]),
    JMP(prog[1], l{exp_after})
@ 1
'jnz(rbx, start) | rbx != 0'
    MACHINE(ip[0], state{run}, rbx[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rbx}, l{start})
->
    MACHINE(ip[.], state{bind}, rbx[_], target{start}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{rbx}, l{start})
@ 1
'jz(rbx, start) | rbx == 0'
    MACHINE(ip[0], state{run}, rbx[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rbx}, l{start})
->
    MACHINE(ip[.], state{bind}, rbx[.], target{start}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{rbx}, l{start})
@ 1
'jnz(rax, start) | rax != 0'
    MACHINE(ip[0], state{run}, rax[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rax}, l{start})
->
    MACHINE(ip[.], state{bind}, rax[_], target{start}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{rax}, l{start})
@ 1
'jz(rax, start) | rax == 0'
    MACHINE(ip[0], state{run}, rax[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rax}, l{start})
->
    MACHINE(ip[.], state{bind}, rax[.], target{start}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{rax}, l{start})
@ 1
'jnz(rcx, start) | rcx != 0'
    MACHINE(ip[0], state{run}, rcx[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rcx}, l{start})
->
    MACHINE(ip[.], state{bind}, rcx[_], target{start}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{rcx}, l{start})
@ 1
'jz(rcx, start) | rcx == 0'
    MACHINE(ip[0], state{run}, rcx[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rcx}, l{start})
->
    MACHINE(ip[.], state{bind}, rcx[.], target{start}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{rcx}, l{start})
@ 1
'jnz(_cpy, start) | _cpy != 0'
    MACHINE(ip[0], state{run}, _cpy[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{_cpy}, l{start})
->
    MACHINE(ip[.], state{bind}, _cpy[_], target{start}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{_cpy}, l{start})
@ 1
'jz(_cpy, start) | _cpy == 0'
    MACHINE(ip[0], state{run}, _cpy[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{_cpy}, l{start})
->
    MACHINE(ip[.], state{bind}, _cpy[.], target{start}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{_cpy}, l{start})
@ 1
'jnz(rdx, start) | rdx != 0'
    MACHINE(ip[0], state{run}, rdx[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rdx}, l{start})
->
    MACHINE(ip[.], state{bind}, rdx[_], target{start}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{rdx}, l{start})
@ 1
'jz(rdx, start) | rdx == 0'
    MACHINE(ip[0], state{run}, rdx[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rdx}, l{start})
->
    MACHINE(ip[.], state{bind}, rdx[.], target{start}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{rdx}, l{start})
@ 1
'jnz(_mul1, start) | _mul1 != 0'
    MACHINE(ip[0], state{run}, _mul1[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{_mul1}, l{start})
->
    MACHINE(ip[.], state{bind}, _mul1[_], target{start}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{_mul1}, l{start})
@ 1
'jz(_mul1, start) | _mul1 == 0'
    MACHINE(ip[0], state{run}, _mul1[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{_mul1}, l{start})
->
    MACHINE(ip[.], state{bind}, _mul1[.], target{start}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{_mul1}, l{start})
@ 1
'jnz(_mul2, start) | _mul2 != 0'
    MACHINE(ip[0], state{run}, _mul2[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{_mul2}, l{start})
->
    MACHINE(ip[.], state{bind}, _mul2[_], target{start}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{_mul2}, l{start})
@ 1
'jz(_mul2, start) | _mul2 == 0'
    MACHINE(ip[0], state{run}, _mul2[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{_mul2}, l{start})
->
    MACHINE(ip[.], state{bind}, _mul2[.], target{start}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{_mul2}, l{start})
@ 1
'jnz(rbx, exp_zero) | rbx != 0'
    MACHINE(ip[0], state{run}, rbx[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rbx}, l{exp_zero})
->
    MACHINE(ip[.], state{bind}, rbx[_], target{exp_zero}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{rbx}, l{exp_zero})
@ 1
'jz(rbx, exp_zero) | rbx == 0'
    MACHINE(ip[0], state{run}, rbx[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rbx}, l{exp_zero})
->
    MACHINE(ip[.], state{bind}, rbx[.], target{exp_zero}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{rbx}, l{exp_zero})
@ 1
'jnz(rax, exp_zero) | rax != 0'
    MACHINE(ip[0], state{run}, rax[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rax}, l{exp_zero})
->
    MACHINE(ip[.], state{bind}, rax[_], target{exp_zero}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{rax}, l{exp_zero})
@ 1
'jz(rax, exp_zero) | rax == 0'
    MACHINE(ip[0], state{run}, rax[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rax}, l{exp_zero})
->
    MACHINE(ip[.], state{bind}, rax[.], target{exp_zero}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{rax}, l{exp_zero})
@ 1
'jnz(rcx, exp_zero) | rcx != 0'
    MACHINE(ip[0], state{run}, rcx[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rcx}, l{exp_zero})
->
    MACHINE(ip[.], state{bind}, rcx[_], target{exp_zero}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{rcx}, l{exp_zero})
@ 1
'jz(rcx, exp_zero) | rcx == 0'
    MACHINE(ip[0], state{run}, rcx[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rcx}, l{exp_zero})
->
    MACHINE(ip[.], state{bind}, rcx[.], target{exp_zero}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{rcx}, l{exp_zero})
@ 1
'jnz(_cpy, exp_zero) | _cpy != 0'
    MACHINE(ip[0], state{run}, _cpy[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{_cpy}, l{exp_zero})
->
    MACHINE(ip[.], state{bind}, _cpy[_], target{exp_zero}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{_cpy}, l{exp_zero})
@ 1
'jz(_cpy, exp_zero) | _cpy == 0'
    MACHINE(ip[0], state{run}, _cpy[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{_cpy}, l{exp_zero})
->
    MACHINE(ip[.], state{bind}, _cpy[.], target{exp_zero}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{_cpy}, l{exp_zero})
@ 1
'jnz(rdx, exp_zero) | rdx != 0'
    MACHINE(ip[0], state{run}, rdx[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rdx}, l{exp_zero})
->
    MACHINE(ip[.], state{bind}, rdx[_], target{exp_zero}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{rdx}, l{exp_zero})
@ 1
'jz(rdx, exp_zero) | rdx == 0'
    MACHINE(ip[0], state{run}, rdx[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rdx}, l{exp_zero})
->
    MACHINE(ip[.], state{bind}, rdx[.], target{exp_zero}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{rdx}, l{exp_zero})
@ 1
'jnz(_mul1, exp_zero) | _mul1 != 0'
    MACHINE(ip[0], state{run}, _mul1[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{_mul1}, l{exp_zero})
->
    MACHINE(ip[.], state{bind}, _mul1[_], target{exp_zero}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{_mul1}, l{exp_zero})
@ 1
'jz(_mul1, exp_zero) | _mul1 == 0'
    MACHINE(ip[0], state{run}, _mul1[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{_mul1}, l{exp_zero})
->
    MACHINE(ip[.], state{bind}, _mul1[.], target{exp_zero}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{_mul1}, l{exp_zero})
@ 1
'jnz(_mul2, exp_zero) | _mul2 != 0'
    MACHINE(ip[0], state{run}, _mul2[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{_mul2}, l{exp_zero})
->
    MACHINE(ip[.], state{bind}, _mul2[_], target{exp_zero}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{_mul2}, l{exp_zero})
@ 1
'jz(_mul2, exp_zero) | _mul2 == 0'
    MACHINE(ip[0], state{run}, _mul2[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{_mul2}, l{exp_zero})
->
    MACHINE(ip[.], state{bind}, _mul2[.], target{exp_zero}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{_mul2}, l{exp_zero})
@ 1
'jnz(rbx, exp_nonzero) | rbx != 0'
    MACHINE(ip[0], state{run}, rbx[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rbx}, l{exp_nonzero})
->
    MACHINE(ip[.], state{bind}, rbx[_], target{exp_nonzero}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{rbx}, l{exp_nonzero})
@ 1
'jz(rbx, exp_nonzero) | rbx == 0'
    MACHINE(ip[0], state{run}, rbx[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rbx}, l{exp_nonzero})
->
    MACHINE(ip[.], state{bind}, rbx[.], target{exp_nonzero}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{rbx}, l{exp_nonzero})
@ 1
'jnz(rax, exp_nonzero) | rax != 0'
    MACHINE(ip[0], state{run}, rax[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rax}, l{exp_nonzero})
->
    MACHINE(ip[.], state{bind}, rax[_], target{exp_nonzero}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{rax}, l{exp_nonzero})
@ 1
'jz(rax, exp_nonzero) | rax == 0'
    MACHINE(ip[0], state{run}, rax[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rax}, l{exp_nonzero})
->
    MACHINE(ip[.], state{bind}, rax[.], target{exp_nonzero}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{rax}, l{exp_nonzero})
@ 1
'jnz(rcx, exp_nonzero) | rcx != 0'
    MACHINE(ip[0], state{run}, rcx[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rcx}, l{exp_nonzero})
->
    MACHINE(ip[.], state{bind}, rcx[_], target{exp_nonzero}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{rcx}, l{exp_nonzero})
@ 1
'jz(rcx, exp_nonzero) | rcx == 0'
    MACHINE(ip[0], state{run}, rcx[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rcx}, l{exp_nonzero})
->
    MACHINE(ip[.], state{bind}, rcx[.], target{exp_nonzero}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{rcx}, l{exp_nonzero})
@ 1
'jnz(_cpy, exp_nonzero) | _cpy != 0'
    MACHINE(ip[0], state{run}, _cpy[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{_cpy}, l{exp_nonzero})
->
    MACHINE(ip[.], state{bind}, _cpy[_], target{exp_nonzero}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{_cpy}, l{exp_nonzero})
@ 1
'jz(_cpy, exp_nonzero) | _cpy == 0'
    MACHINE(ip[0], state{run}, _cpy[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{_cpy}, l{exp_nonzero})
->
    MACHINE(ip[.], state{bind}, _cpy[.], target{exp_nonzero}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{_cpy}, l{exp_nonzero})
@ 1
'jnz(rdx, exp_nonzero) | rdx != 0'
    MACHINE(ip[0], state{run}, rdx[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rdx}, l{exp_nonzero})
->
    MACHINE(ip[.], state{bind}, rdx[_], target{exp_nonzero}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{rdx}, l{exp_nonzero})
@ 1
'jz(rdx, exp_nonzero) | rdx == 0'
    MACHINE(ip[0], state{run}, rdx[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rdx}, l{exp_nonzero})
->
    MACHINE(ip[.], state{bind}, rdx[.], target{exp_nonzero}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{rdx}, l{exp_nonzero})
@ 1
'jnz(_mul1, exp_nonzero) | _mul1 != 0'
    MACHINE(ip[0], state{run}, _mul1[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{_mul1}, l{exp_nonzero})
->
    MACHINE(ip[.], state{bind}, _mul1[_], target{exp_nonzero}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{_mul1}, l{exp_nonzero})
@ 1
'jz(_mul1, exp_nonzero) | _mul1 == 0'
    MACHINE(ip[0], state{run}, _mul1[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{_mul1}, l{exp_nonzero})
->
    MACHINE(ip[.], state{bind}, _mul1[.], target{exp_nonzero}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{_mul1}, l{exp_nonzero})
@ 1
'jnz(_mul2, exp_nonzero) | _mul2 != 0'
    MACHINE(ip[0], state{run}, _mul2[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{_mul2}, l{exp_nonzero})
->
    MACHINE(ip[.], state{bind}, _mul2[_], target{exp_nonzero}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{_mul2}, l{exp_nonzero})
@ 1
'jz(_mul2, exp_nonzero) | _mul2 == 0'
    MACHINE(ip[0], state{run}, _mul2[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{_mul2}, l{exp_nonzero})
->
    MACHINE(ip[.], state{bind}, _mul2[.], target{exp_nonzero}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{_mul2}, l{exp_nonzero})
@ 1
'jnz(rbx, _cpy_1) | rbx != 0'
    MACHINE(ip[0], state{run}, rbx[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rbx}, l{_cpy_1})
->
    MACHINE(ip[.], state{bind}, rbx[_], target{_cpy_1}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{rbx}, l{_cpy_1})
@ 1
'jz(rbx, _cpy_1) | rbx == 0'
    MACHINE(ip[0], state{run}, rbx[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rbx}, l{_cpy_1})
->
    MACHINE(ip[.], state{bind}, rbx[.], target{_cpy_1}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{rbx}, l{_cpy_1})
@ 1
'jnz(rax, _cpy_1) | rax != 0'
    MACHINE(ip[0], state{run}, rax[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rax}, l{_cpy_1})
->
    MACHINE(ip[.], state{bind}, rax[_], target{_cpy_1}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{rax}, l{_cpy_1})
@ 1
'jz(rax, _cpy_1) | rax == 0'
    MACHINE(ip[0], state{run}, rax[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rax}, l{_cpy_1})
->
    MACHINE(ip[.], state{bind}, rax[.], target{_cpy_1}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{rax}, l{_cpy_1})
@ 1
'jnz(rcx, _cpy_1) | rcx != 0'
    MACHINE(ip[0], state{run}, rcx[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rcx}, l{_cpy_1})
->
    MACHINE(ip[.], state{bind}, rcx[_], target{_cpy_1}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{rcx}, l{_cpy_1})
@ 1
'jz(rcx, _cpy_1) | rcx == 0'
    MACHINE(ip[0], state{run}, rcx[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rcx}, l{_cpy_1})
->
    MACHINE(ip[.], state{bind}, rcx[.], target{_cpy_1}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{rcx}, l{_cpy_1})
@ 1
'jnz(_cpy, _cpy_1) | _cpy != 0'
    MACHINE(ip[0], state{run}, _cpy[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{_cpy}, l{_cpy_1})
->
    MACHINE(ip[.], state{bind}, _cpy[_], target{_cpy_1}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{_cpy}, l{_cpy_1})
@ 1
'jz(_cpy, _cpy_1) | _cpy == 0'
    MACHINE(ip[0], state{run}, _cpy[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{_cpy}, l{_cpy_1})
->
    MACHINE(ip[.], state{bind}, _cpy[.], target{_cpy_1}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{_cpy}, l{_cpy_1})
@ 1
'jnz(rdx, _cpy_1) | rdx != 0'
    MACHINE(ip[0], state{run}, rdx[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rdx}, l{_cpy_1})
->
    MACHINE(ip[.], state{bind}, rdx[_], target{_cpy_1}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{rdx}, l{_cpy_1})
@ 1
'jz(rdx, _cpy_1) | rdx == 0'
    MACHINE(ip[0], state{run}, rdx[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rdx}, l{_cpy_1})
->
    MACHINE(ip[.], state{bind}, rdx[.], target{_cpy_1}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{rdx}, l{_cpy_1})
@ 1
'jnz(_mul1, _cpy_1) | _mul1 != 0'
    MACHINE(ip[0], state{run}, _mul1[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{_mul1}, l{_cpy_1})
->
    MACHINE(ip[.], state{bind}, _mul1[_], target{_cpy_1}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{_mul1}, l{_cpy_1})
@ 1
'jz(_mul1, _cpy_1) | _mul1 == 0'
    MACHINE(ip[0], state{run}, _mul1[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{_mul1}, l{_cpy_1})
->
    MACHINE(ip[.], state{bind}, _mul1[.], target{_cpy_1}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{_mul1}, l{_cpy_1})
@ 1
'jnz(_mul2, _cpy_1) | _mul2 != 0'
    MACHINE(ip[0], state{run}, _mul2[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{_mul2}, l{_cpy_1})
->
    MACHINE(ip[.], state{bind}, _mul2[_], target{_cpy_1}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{_mul2}, l{_cpy_1})
@ 1
'jz(_mul2, _cpy_1) | _mul2 == 0'
    MACHINE(ip[0], state{run}, _mul2[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{_mul2}, l{_cpy_1})
->
    MACHINE(ip[.], state{bind}, _mul2[.], target{_cpy_1}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{_mul2}, l{_cpy_1})
@ 1
'jnz(rbx, exp_loop) | rbx != 0'
    MACHINE(ip[0], state{run}, rbx[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rbx}, l{exp_loop})
->
    MACHINE(ip[.], state{bind}, rbx[_], target{exp_loop}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{rbx}, l{exp_loop})
@ 1
'jz(rbx, exp_loop) | rbx == 0'
    MACHINE(ip[0], state{run}, rbx[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rbx}, l{exp_loop})
->
    MACHINE(ip[.], state{bind}, rbx[.], target{exp_loop}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{rbx}, l{exp_loop})
@ 1
'jnz(rax, exp_loop) | rax != 0'
    MACHINE(ip[0], state{run}, rax[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rax}, l{exp_loop})
->
    MACHINE(ip[.], state{bind}, rax[_], target{exp_loop}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{rax}, l{exp_loop})
@ 1
'jz(rax, exp_loop) | rax == 0'
    MACHINE(ip[0], state{run}, rax[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rax}, l{exp_loop})
->
    MACHINE(ip[.], state{bind}, rax[.], target{exp_loop}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{rax}, l{exp_loop})
@ 1
'jnz(rcx, exp_loop) | rcx != 0'
    MACHINE(ip[0], state{run}, rcx[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rcx}, l{exp_loop})
->
    MACHINE(ip[.], state{bind}, rcx[_], target{exp_loop}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{rcx}, l{exp_loop})
@ 1
'jz(rcx, exp_loop) | rcx == 0'
    MACHINE(ip[0], state{run}, rcx[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rcx}, l{exp_loop})
->
    MACHINE(ip[.], state{bind}, rcx[.], target{exp_loop}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{rcx}, l{exp_loop})
@ 1
'jnz(_cpy, exp_loop) | _cpy != 0'
    MACHINE(ip[0], state{run}, _cpy[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{_cpy}, l{exp_loop})
->
    MACHINE(ip[.], state{bind}, _cpy[_], target{exp_loop}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{_cpy}, l{exp_loop})
@ 1
'jz(_cpy, exp_loop) | _cpy == 0'
    MACHINE(ip[0], state{run}, _cpy[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{_cpy}, l{exp_loop})
->
    MACHINE(ip[.], state{bind}, _cpy[.], target{exp_loop}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{_cpy}, l{exp_loop})
@ 1
'jnz(rdx, exp_loop) | rdx != 0'
    MACHINE(ip[0], state{run}, rdx[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rdx}, l{exp_loop})
->
    MACHINE(ip[.], state{bind}, rdx[_], target{exp_loop}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{rdx}, l{exp_loop})
@ 1
'jz(rdx, exp_loop) | rdx == 0'
    MACHINE(ip[0], state{run}, rdx[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rdx}, l{exp_loop})
->
    MACHINE(ip[.], state{bind}, rdx[.], target{exp_loop}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{rdx}, l{exp_loop})
@ 1
'jnz(_mul1, exp_loop) | _mul1 != 0'
    MACHINE(ip[0], state{run}, _mul1[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{_mul1}, l{exp_loop})
->
    MACHINE(ip[.], state{bind}, _mul1[_], target{exp_loop}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{_mul1}, l{exp_loop})
@ 1
'jz(_mul1, exp_loop) | _mul1 == 0'
    MACHINE(ip[0], state{run}, _mul1[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{_mul1}, l{exp_loop})
->
    MACHINE(ip[.], state{bind}, _mul1[.], target{exp_loop}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{_mul1}, l{exp_loop})
@ 1
'jnz(_mul2, exp_loop) | _mul2 != 0'
    MACHINE(ip[0], state{run}, _mul2[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{_mul2}, l{exp_loop})
->
    MACHINE(ip[.], state{bind}, _mul2[_], target{exp_loop}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{_mul2}, l{exp_loop})
@ 1
'jz(_mul2, exp_loop) | _mul2 == 0'
    MACHINE(ip[0], state{run}, _mul2[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{_mul2}, l{exp_loop})
->
    MACHINE(ip[.], state{bind}, _mul2[.], target{exp_loop}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{_mul2}, l{exp_loop})
@ 1
'jnz(rbx, _cpy_2) | rbx != 0'
    MACHINE(ip[0], state{run}, rbx[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rbx}, l{_cpy_2})
->
    MACHINE(ip[.], state{bind}, rbx[_], target{_cpy_2}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{rbx}, l{_cpy_2})
@ 1
'jz(rbx, _cpy_2) | rbx == 0'
    MACHINE(ip[0], state{run}, rbx[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rbx}, l{_cpy_2})
->
    MACHINE(ip[.], state{bind}, rbx[.], target{_cpy_2}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{rbx}, l{_cpy_2})
@ 1
'jnz(rax, _cpy_2) | rax != 0'
    MACHINE(ip[0], state{run}, rax[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rax}, l{_cpy_2})
->
    MACHINE(ip[.], state{bind}, rax[_], target{_cpy_2}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{rax}, l{_cpy_2})
@ 1
'jz(rax, _cpy_2) | rax == 0'
    MACHINE(ip[0], state{run}, rax[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rax}, l{_cpy_2})
->
    MACHINE(ip[.], state{bind}, rax[.], target{_cpy_2}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{rax}, l{_cpy_2})
@ 1
'jnz(rcx, _cpy_2) | rcx != 0'
    MACHINE(ip[0], state{run}, rcx[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rcx}, l{_cpy_2})
->
    MACHINE(ip[.], state{bind}, rcx[_], target{_cpy_2}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{rcx}, l{_cpy_2})
@ 1
'jz(rcx, _cpy_2) | rcx == 0'
    MACHINE(ip[0], state{run}, rcx[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rcx}, l{_cpy_2})
->
    MACHINE(ip[.], state{bind}, rcx[.], target{_cpy_2}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{rcx}, l{_cpy_2})
@ 1
'jnz(_cpy, _cpy_2) | _cpy != 0'
    MACHINE(ip[0], state{run}, _cpy[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{_cpy}, l{_cpy_2})
->
    MACHINE(ip[.], state{bind}, _cpy[_], target{_cpy_2}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{_cpy}, l{_cpy_2})
@ 1
'jz(_cpy, _cpy_2) | _cpy == 0'
    MACHINE(ip[0], state{run}, _cpy[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{_cpy}, l{_cpy_2})
->
    MACHINE(ip[.], state{bind}, _cpy[.], target{_cpy_2}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{_cpy}, l{_cpy_2})
@ 1
'jnz(rdx, _cpy_2) | rdx != 0'
    MACHINE(ip[0], state{run}, rdx[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rdx}, l{_cpy_2})
->
    MACHINE(ip[.], state{bind}, rdx[_], target{_cpy_2}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{rdx}, l{_cpy_2})
@ 1
'jz(rdx, _cpy_2) | rdx == 0'
    MACHINE(ip[0], state{run}, rdx[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rdx}, l{_cpy_2})
->
    MACHINE(ip[.], state{bind}, rdx[.], target{_cpy_2}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{rdx}, l{_cpy_2})
@ 1
'jnz(_mul1, _cpy_2) | _mul1 != 0'
    MACHINE(ip[0], state{run}, _mul1[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{_mul1}, l{_cpy_2})
->
    MACHINE(ip[.], state{bind}, _mul1[_], target{_cpy_2}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{_mul1}, l{_cpy_2})
@ 1
'jz(_mul1, _cpy_2) | _mul1 == 0'
    MACHINE(ip[0], state{run}, _mul1[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{_mul1}, l{_cpy_2})
->
    MACHINE(ip[.], state{bind}, _mul1[.], target{_cpy_2}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{_mul1}, l{_cpy_2})
@ 1
'jnz(_mul2, _cpy_2) | _mul2 != 0'
    MACHINE(ip[0], state{run}, _mul2[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{_mul2}, l{_cpy_2})
->
    MACHINE(ip[.], state{bind}, _mul2[_], target{_cpy_2}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{_mul2}, l{_cpy_2})
@ 1
'jz(_mul2, _cpy_2) | _mul2 == 0'
    MACHINE(ip[0], state{run}, _mul2[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{_mul2}, l{_cpy_2})
->
    MACHINE(ip[.], state{bind}, _mul2[.], target{_cpy_2}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{_mul2}, l{_cpy_2})
@ 1
'jnz(rbx, _cpy_3) | rbx != 0'
    MACHINE(ip[0], state{run}, rbx[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rbx}, l{_cpy_3})
->
    MACHINE(ip[.], state{bind}, rbx[_], target{_cpy_3}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{rbx}, l{_cpy_3})
@ 1
'jz(rbx, _cpy_3) | rbx == 0'
    MACHINE(ip[0], state{run}, rbx[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rbx}, l{_cpy_3})
->
    MACHINE(ip[.], state{bind}, rbx[.], target{_cpy_3}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{rbx}, l{_cpy_3})
@ 1
'jnz(rax, _cpy_3) | rax != 0'
    MACHINE(ip[0], state{run}, rax[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rax}, l{_cpy_3})
->
    MACHINE(ip[.], state{bind}, rax[_], target{_cpy_3}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{rax}, l{_cpy_3})
@ 1
'jz(rax, _cpy_3) | rax == 0'
    MACHINE(ip[0], state{run}, rax[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rax}, l{_cpy_3})
->
    MACHINE(ip[.], state{bind}, rax[.], target{_cpy_3}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{rax}, l{_cpy_3})
@ 1
'jnz(rcx, _cpy_3) | rcx != 0'
    MACHINE(ip[0], state{run}, rcx[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rcx}, l{_cpy_3})
->
    MACHINE(ip[.], state{bind}, rcx[_], target{_cpy_3}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{rcx}, l{_cpy_3})
@ 1
'jz(rcx, _cpy_3) | rcx == 0'
    MACHINE(ip[0], state{run}, rcx[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rcx}, l{_cpy_3})
->
    MACHINE(ip[.], state{bind}, rcx[.], target{_cpy_3}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{rcx}, l{_cpy_3})
@ 1
'jnz(_cpy, _cpy_3) | _cpy != 0'
    MACHINE(ip[0], state{run}, _cpy[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{_cpy}, l{_cpy_3})
->
    MACHINE(ip[.], state{bind}, _cpy[_], target{_cpy_3}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{_cpy}, l{_cpy_3})
@ 1
'jz(_cpy, _cpy_3) | _cpy == 0'
    MACHINE(ip[0], state{run}, _cpy[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{_cpy}, l{_cpy_3})
->
    MACHINE(ip[.], state{bind}, _cpy[.], target{_cpy_3}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{_cpy}, l{_cpy_3})
@ 1
'jnz(rdx, _cpy_3) | rdx != 0'
    MACHINE(ip[0], state{run}, rdx[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rdx}, l{_cpy_3})
->
    MACHINE(ip[.], state{bind}, rdx[_], target{_cpy_3}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{rdx}, l{_cpy_3})
@ 1
'jz(rdx, _cpy_3) | rdx == 0'
    MACHINE(ip[0], state{run}, rdx[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rdx}, l{_cpy_3})
->
    MACHINE(ip[.], state{bind}, rdx[.], target{_cpy_3}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{rdx}, l{_cpy_3})
@ 1
'jnz(_mul1, _cpy_3) | _mul1 != 0'
    MACHINE(ip[0], state{run}, _mul1[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{_mul1}, l{_cpy_3})
->
    MACHINE(ip[.], state{bind}, _mul1[_], target{_cpy_3}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{_mul1}, l{_cpy_3})
@ 1
'jz(_mul1, _cpy_3) | _mul1 == 0'
    MACHINE(ip[0], state{run}, _mul1[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{_mul1}, l{_cpy_3})
->
    MACHINE(ip[.], state{bind}, _mul1[.], target{_cpy_3}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{_mul1}, l{_cpy_3})
@ 1
'jnz(_mul2, _cpy_3) | _mul2 != 0'
    MACHINE(ip[0], state{run}, _mul2[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{_mul2}, l{_cpy_3})
->
    MACHINE(ip[.], state{bind}, _mul2[_], target{_cpy_3}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{_mul2}, l{_cpy_3})
@ 1
'jz(_mul2, _cpy_3) | _mul2 == 0'
    MACHINE(ip[0], state{run}, _mul2[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{_mul2}, l{_cpy_3})
->
    MACHINE(ip[.], state{bind}, _mul2[.], target{_cpy_3}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{_mul2}, l{_cpy_3})
@ 1
'jnz(rbx, _mov_1_loop) | rbx != 0'
    MACHINE(ip[0], state{run}, rbx[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rbx}, l{_mov_1_loop})
->
    MACHINE(ip[.], state{bind}, rbx[_], target{_mov_1_loop}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{rbx}, l{_mov_1_loop})
@ 1
'jz(rbx, _mov_1_loop) | rbx == 0'
    MACHINE(ip[0], state{run}, rbx[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rbx}, l{_mov_1_loop})
->
    MACHINE(ip[.], state{bind}, rbx[.], target{_mov_1_loop}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{rbx}, l{_mov_1_loop})
@ 1
'jnz(rax, _mov_1_loop) | rax != 0'
    MACHINE(ip[0], state{run}, rax[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rax}, l{_mov_1_loop})
->
    MACHINE(ip[.], state{bind}, rax[_], target{_mov_1_loop}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{rax}, l{_mov_1_loop})
@ 1
'jz(rax, _mov_1_loop) | rax == 0'
    MACHINE(ip[0], state{run}, rax[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rax}, l{_mov_1_loop})
->
    MACHINE(ip[.], state{bind}, rax[.], target{_mov_1_loop}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{rax}, l{_mov_1_loop})
@ 1
'jnz(rcx, _mov_1_loop) | rcx != 0'
    MACHINE(ip[0], state{run}, rcx[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rcx}, l{_mov_1_loop})
->
    MACHINE(ip[.], state{bind}, rcx[_], target{_mov_1_loop}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{rcx}, l{_mov_1_loop})
@ 1
'jz(rcx, _mov_1_loop) | rcx == 0'
    MACHINE(ip[0], state{run}, rcx[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rcx}, l{_mov_1_loop})
->
    MACHINE(ip[.], state{bind}, rcx[.], target{_mov_1_loop}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{rcx}, l{_mov_1_loop})
@ 1
'jnz(_cpy, _mov_1_loop) | _cpy != 0'
    MACHINE(ip[0], state{run}, _cpy[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{_cpy}, l{_mov_1_loop})
->
    MACHINE(ip[.], state{bind}, _cpy[_], target{_mov_1_loop}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{_cpy}, l{_mov_1_loop})
@ 1
'jz(_cpy, _mov_1_loop) | _cpy == 0'
    MACHINE(ip[0], state{run}, _cpy[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{_cpy}, l{_mov_1_loop})
->
    MACHINE(ip[.], state{bind}, _cpy[.], target{_mov_1_loop}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{_cpy}, l{_mov_1_loop})
@ 1
'jnz(rdx, _mov_1_loop) | rdx != 0'
    MACHINE(ip[0], state{run}, rdx[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rdx}, l{_mov_1_loop})
->
    MACHINE(ip[.], state{bind}, rdx[_], target{_mov_1_loop}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{rdx}, l{_mov_1_loop})
@ 1
'jz(rdx, _mov_1_loop) | rdx == 0'
    MACHINE(ip[0], state{run}, rdx[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rdx}, l{_mov_1_loop})
->
    MACHINE(ip[.], state{bind}, rdx[.], target{_mov_1_loop}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{rdx}, l{_mov_1_loop})
@ 1
'jnz(_mul1, _mov_1_loop) | _mul1 != 0'
    MACHINE(ip[0], state{run}, _mul1[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{_mul1}, l{_mov_1_loop})
->
    MACHINE(ip[.], state{bind}, _mul1[_], target{_mov_1_loop}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{_mul1}, l{_mov_1_loop})
@ 1
'jz(_mul1, _mov_1_loop) | _mul1 == 0'
    MACHINE(ip[0], state{run}, _mul1[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{_mul1}, l{_mov_1_loop})
->
    MACHINE(ip[.], state{bind}, _mul1[.], target{_mov_1_loop}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{_mul1}, l{_mov_1_loop})
@ 1
'jnz(_mul2, _mov_1_loop) | _mul2 != 0'
    MACHINE(ip[0], state{run}, _mul2[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{_mul2}, l{_mov_1_loop})
->
    MACHINE(ip[.], state{bind}, _mul2[_], target{_mov_1_loop}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{_mul2}, l{_mov_1_loop})
@ 1
'jz(_mul2, _mov_1_loop) | _mul2 == 0'
    MACHINE(ip[0], state{run}, _mul2[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{_mul2}, l{_mov_1_loop})
->
    MACHINE(ip[.], state{bind}, _mul2[.], target{_mov_1_loop}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{_mul2}, l{_mov_1_loop})
@ 1
'jnz(rbx, _cpy_4) | rbx != 0'
    MACHINE(ip[0], state{run}, rbx[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rbx}, l{_cpy_4})
->
    MACHINE(ip[.], state{bind}, rbx[_], target{_cpy_4}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{rbx}, l{_cpy_4})
@ 1
'jz(rbx, _cpy_4) | rbx == 0'
    MACHINE(ip[0], state{run}, rbx[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rbx}, l{_cpy_4})
->
    MACHINE(ip[.], state{bind}, rbx[.], target{_cpy_4}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{rbx}, l{_cpy_4})
@ 1
'jnz(rax, _cpy_4) | rax != 0'
    MACHINE(ip[0], state{run}, rax[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rax}, l{_cpy_4})
->
    MACHINE(ip[.], state{bind}, rax[_], target{_cpy_4}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{rax}, l{_cpy_4})
@ 1
'jz(rax, _cpy_4) | rax == 0'
    MACHINE(ip[0], state{run}, rax[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rax}, l{_cpy_4})
->
    MACHINE(ip[.], state{bind}, rax[.], target{_cpy_4}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{rax}, l{_cpy_4})
@ 1
'jnz(rcx, _cpy_4) | rcx != 0'
    MACHINE(ip[0], state{run}, rcx[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rcx}, l{_cpy_4})
->
    MACHINE(ip[.], state{bind}, rcx[_], target{_cpy_4}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{rcx}, l{_cpy_4})
@ 1
'jz(rcx, _cpy_4) | rcx == 0'
    MACHINE(ip[0], state{run}, rcx[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rcx}, l{_cpy_4})
->
    MACHINE(ip[.], state{bind}, rcx[.], target{_cpy_4}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{rcx}, l{_cpy_4})
@ 1
'jnz(_cpy, _cpy_4) | _cpy != 0'
    MACHINE(ip[0], state{run}, _cpy[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{_cpy}, l{_cpy_4})
->
    MACHINE(ip[.], state{bind}, _cpy[_], target{_cpy_4}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{_cpy}, l{_cpy_4})
@ 1
'jz(_cpy, _cpy_4) | _cpy == 0'
    MACHINE(ip[0], state{run}, _cpy[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{_cpy}, l{_cpy_4})
->
    MACHINE(ip[.], state{bind}, _cpy[.], target{_cpy_4}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{_cpy}, l{_cpy_4})
@ 1
'jnz(rdx, _cpy_4) | rdx != 0'
    MACHINE(ip[0], state{run}, rdx[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rdx}, l{_cpy_4})
->
    MACHINE(ip[.], state{bind}, rdx[_], target{_cpy_4}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{rdx}, l{_cpy_4})
@ 1
'jz(rdx, _cpy_4) | rdx == 0'
    MACHINE(ip[0], state{run}, rdx[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rdx}, l{_cpy_4})
->
    MACHINE(ip[.], state{bind}, rdx[.], target{_cpy_4}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{rdx}, l{_cpy_4})
@ 1
'jnz(_mul1, _cpy_4) | _mul1 != 0'
    MACHINE(ip[0], state{run}, _mul1[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{_mul1}, l{_cpy_4})
->
    MACHINE(ip[.], state{bind}, _mul1[_], target{_cpy_4}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{_mul1}, l{_cpy_4})
@ 1
'jz(_mul1, _cpy_4) | _mul1 == 0'
    MACHINE(ip[0], state{run}, _mul1[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{_mul1}, l{_cpy_4})
->
    MACHINE(ip[.], state{bind}, _mul1[.], target{_cpy_4}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{_mul1}, l{_cpy_4})
@ 1
'jnz(_mul2, _cpy_4) | _mul2 != 0'
    MACHINE(ip[0], state{run}, _mul2[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{_mul2}, l{_cpy_4})
->
    MACHINE(ip[.], state{bind}, _mul2[_], target{_cpy_4}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{_mul2}, l{_cpy_4})
@ 1
'jz(_mul2, _cpy_4) | _mul2 == 0'
    MACHINE(ip[0], state{run}, _mul2[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{_mul2}, l{_cpy_4})
->
    MACHINE(ip[.], state{bind}, _mul2[.], target{_cpy_4}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{_mul2}, l{_cpy_4})
@ 1
'jnz(rbx, _mov_1_after) | rbx != 0'
    MACHINE(ip[0], state{run}, rbx[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rbx}, l{_mov_1_after})
->
    MACHINE(ip[.], state{bind}, rbx[_], target{_mov_1_after}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{rbx}, l{_mov_1_after})
@ 1
'jz(rbx, _mov_1_after) | rbx == 0'
    MACHINE(ip[0], state{run}, rbx[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rbx}, l{_mov_1_after})
->
    MACHINE(ip[.], state{bind}, rbx[.], target{_mov_1_after}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{rbx}, l{_mov_1_after})
@ 1
'jnz(rax, _mov_1_after) | rax != 0'
    MACHINE(ip[0], state{run}, rax[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rax}, l{_mov_1_after})
->
    MACHINE(ip[.], state{bind}, rax[_], target{_mov_1_after}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{rax}, l{_mov_1_after})
@ 1
'jz(rax, _mov_1_after) | rax == 0'
    MACHINE(ip[0], state{run}, rax[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rax}, l{_mov_1_after})
->
    MACHINE(ip[.], state{bind}, rax[.], target{_mov_1_after}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{rax}, l{_mov_1_after})
@ 1
'jnz(rcx, _mov_1_after) | rcx != 0'
    MACHINE(ip[0], state{run}, rcx[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rcx}, l{_mov_1_after})
->
    MACHINE(ip[.], state{bind}, rcx[_], target{_mov_1_after}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{rcx}, l{_mov_1_after})
@ 1
'jz(rcx, _mov_1_after) | rcx == 0'
    MACHINE(ip[0], state{run}, rcx[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rcx}, l{_mov_1_after})
->
    MACHINE(ip[.], state{bind}, rcx[.], target{_mov_1_after}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{rcx}, l{_mov_1_after})
@ 1
'jnz(_cpy, _mov_1_after) | _cpy != 0'
    MACHINE(ip[0], state{run}, _cpy[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{_cpy}, l{_mov_1_after})
->
    MACHINE(ip[.], state{bind}, _cpy[_], target{_mov_1_after}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{_cpy}, l{_mov_1_after})
@ 1
'jz(_cpy, _mov_1_after) | _cpy == 0'
    MACHINE(ip[0], state{run}, _cpy[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{_cpy}, l{_mov_1_after})
->
    MACHINE(ip[.], state{bind}, _cpy[.], target{_mov_1_after}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{_cpy}, l{_mov_1_after})
@ 1
'jnz(rdx, _mov_1_after) | rdx != 0'
    MACHINE(ip[0], state{run}, rdx[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rdx}, l{_mov_1_after})
->
    MACHINE(ip[.], state{bind}, rdx[_], target{_mov_1_after}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{rdx}, l{_mov_1_after})
@ 1
'jz(rdx, _mov_1_after) | rdx == 0'
    MACHINE(ip[0], state{run}, rdx[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rdx}, l{_mov_1_after})
->
    MACHINE(ip[.], state{bind}, rdx[.], target{_mov_1_after}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{rdx}, l{_mov_1_after})
@ 1
'jnz(_mul1, _mov_1_after) | _mul1 != 0'
    MACHINE(ip[0], state{run}, _mul1[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{_mul1}, l{_mov_1_after})
->
    MACHINE(ip[.], state{bind}, _mul1[_], target{_mov_1_after}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{_mul1}, l{_mov_1_after})
@ 1
'jz(_mul1, _mov_1_after) | _mul1 == 0'
    MACHINE(ip[0], state{run}, _mul1[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{_mul1}, l{_mov_1_after})
->
    MACHINE(ip[.], state{bind}, _mul1[.], target{_mov_1_after}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{_mul1}, l{_mov_1_after})
@ 1
'jnz(_mul2, _mov_1_after) | _mul2 != 0'
    MACHINE(ip[0], state{run}, _mul2[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{_mul2}, l{_mov_1_after})
->
    MACHINE(ip[.], state{bind}, _mul2[_], target{_mov_1_after}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{_mul2}, l{_mov_1_after})
@ 1
'jz(_mul2, _mov_1_after) | _mul2 == 0'
    MACHINE(ip[0], state{run}, _mul2[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{_mul2}, l{_mov_1_after})
->
    MACHINE(ip[.], state{bind}, _mul2[.], target{_mov_1_after}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{_mul2}, l{_mov_1_after})
@ 1
'jnz(rbx, exp_after) | rbx != 0'
    MACHINE(ip[0], state{run}, rbx[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rbx}, l{exp_after})
->
    MACHINE(ip[.], state{bind}, rbx[_], target{exp_after}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{rbx}, l{exp_after})
@ 1
'jz(rbx, exp_after) | rbx == 0'
    MACHINE(ip[0], state{run}, rbx[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rbx}, l{exp_after})
->
    MACHINE(ip[.], state{bind}, rbx[.], target{exp_after}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{rbx}, l{exp_after})
@ 1
'jnz(rax, exp_after) | rax != 0'
    MACHINE(ip[0], state{run}, rax[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rax}, l{exp_after})
->
    MACHINE(ip[.], state{bind}, rax[_], target{exp_after}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{rax}, l{exp_after})
@ 1
'jz(rax, exp_after) | rax == 0'
    MACHINE(ip[0], state{run}, rax[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rax}, l{exp_after})
->
    MACHINE(ip[.], state{bind}, rax[.], target{exp_after}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{rax}, l{exp_after})
@ 1
'jnz(rcx, exp_after) | rcx != 0'
    MACHINE(ip[0], state{run}, rcx[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rcx}, l{exp_after})
->
    MACHINE(ip[.], state{bind}, rcx[_], target{exp_after}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{rcx}, l{exp_after})
@ 1
'jz(rcx, exp_after) | rcx == 0'
    MACHINE(ip[0], state{run}, rcx[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rcx}, l{exp_after})
->
    MACHINE(ip[.], state{bind}, rcx[.], target{exp_after}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{rcx}, l{exp_after})
@ 1
'jnz(_cpy, exp_after) | _cpy != 0'
    MACHINE(ip[0], state{run}, _cpy[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{_cpy}, l{exp_after})
->
    MACHINE(ip[.], state{bind}, _cpy[_], target{exp_after}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{_cpy}, l{exp_after})
@ 1
'jz(_cpy, exp_after) | _cpy == 0'
    MACHINE(ip[0], state{run}, _cpy[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{_cpy}, l{exp_after})
->
    MACHINE(ip[.], state{bind}, _cpy[.], target{exp_after}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{_cpy}, l{exp_after})
@ 1
'jnz(rdx, exp_after) | rdx != 0'
    MACHINE(ip[0], state{run}, rdx[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{rdx}, l{exp_after})
->
    MACHINE(ip[.], state{bind}, rdx[_], target{exp_after}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{rdx}, l{exp_after})
@ 1
'jz(rdx, exp_after) | rdx == 0'
    MACHINE(ip[0], state{run}, rdx[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{rdx}, l{exp_after})
->
    MACHINE(ip[.], state{bind}, rdx[.], target{exp_after}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{rdx}, l{exp_after})
@ 1
'jnz(_mul1, exp_after) | _mul1 != 0'
    MACHINE(ip[0], state{run}, _mul1[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{_mul1}, l{exp_after})
->
    MACHINE(ip[.], state{bind}, _mul1[_], target{exp_after}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{_mul1}, l{exp_after})
@ 1
'jz(_mul1, exp_after) | _mul1 == 0'
    MACHINE(ip[0], state{run}, _mul1[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{_mul1}, l{exp_after})
->
    MACHINE(ip[.], state{bind}, _mul1[.], target{exp_after}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{_mul1}, l{exp_after})
@ 1
'jnz(_mul2, exp_after) | _mul2 != 0'
    MACHINE(ip[0], state{run}, _mul2[_], target{_none}),
    PROG(cm[0], ins[1]),
    JNZ(prog[1], r{_mul2}, l{exp_after})
->
    MACHINE(ip[.], state{bind}, _mul2[_], target{exp_after}),
    PROG(cm[.], ins[1]),
    JNZ(prog[1], r{_mul2}, l{exp_after})
@ 1
'jz(_mul2, exp_after) | _mul2 == 0'
    MACHINE(ip[0], state{run}, _mul2[.], target{_none}),
    PROG(cm[0], ins[1]),
    JZ(prog[1], r{_mul2}, l{exp_after})
->
    MACHINE(ip[.], state{bind}, _mul2[.], target{exp_after}),
    PROG(cm[.], ins[1]),
    JZ(prog[1], r{_mul2}, l{exp_after})
@ 1
'relabel_units | rbx -> rax'
    UNIT(prev[_], next[0], r{rbx}),
    UNIT(prev[0], r{rax})
->
    UNIT(prev[_], next[0], r{rbx}),
    UNIT(prev[0], r{rbx})
@ inf
'add(rbx, rax) | rbx == 0'
    MACHINE(ip[0], state{run}, rbx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rbx})
->
    MACHINE(ip[0], state{next}, rbx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rbx})
@ 1
'add(rbx, rax) | rax == 0'
    MACHINE(ip[0], state{run}, rbx[2], rax[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rbx}, dst{rax}),
    UNIT(prev[2], r{rbx})
->
    MACHINE(ip[0], state{next}, rbx[.], rax[2]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rbx}, dst{rax}),
    UNIT(prev[2], r{rax})
@ 1
'add(rbx, rax) | rbx != 0'
    MACHINE(ip[0], state{run}, rbx[2], rax[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rbx}, dst{rax}),
    UNIT(prev[2], r{rbx}),
    UNIT(next[.], r{rax})
->
    MACHINE(ip[0], state{next}, rbx[.], rax[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rbx}, dst{rax}),
    UNIT(prev[2], r{rax}),
    UNIT(next[2], r{rax})
@ 1
'mov(rbx, rax) | rbx == 0'
    MACHINE(ip[0], state{run}, rbx[.], rax[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rbx}, dst{rax})
->
    MACHINE(ip[0], state{next}, rbx[.], rax[.]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rbx}, dst{rax})
@ 1
'mov(rbx, rax) | rbx != 0, rax == 0'
    MACHINE(ip[0], state{run}, rbx[2], rax[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rbx}, dst{rax}),
    UNIT(prev[2], r{rbx})
->
    MACHINE(ip[0], state{next}, rbx[.], rax[2]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rbx}, dst{rax}),
    UNIT(prev[2], r{rax})
@ 1
'swp(rbx, rax) | rbx != 0, rax != 0'
    MACHINE(ip[0], state{run}, rbx[2], rax[3]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{rax}),
    UNIT(prev[2], r{rbx}),
    UNIT(prev[3], r{rax})
->
    MACHINE(ip[0], state{next}, rbx[3], rax[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{rax}),
    UNIT(prev[2], r{rax}),
    UNIT(prev[3], r{rbx})
@ 1
'swp(rbx, rax) | rax == 0'
    MACHINE(ip[0], state{run}, rbx[2], rax[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{rax}),
    UNIT(prev[2], r{rbx})
->
    MACHINE(ip[0], state{next}, rbx[.], rax[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{rax}),
    UNIT(prev[2], r{rax})
@ 1
'swp(rbx, rax) | rbx == 0, rax != 0'
    MACHINE(ip[0], state{run}, rbx[.], rax[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{rax}),
    UNIT(prev[2], r{rax})
->
    MACHINE(ip[0], state{next}, rbx[2], rax[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{rax}),
    UNIT(prev[2], r{rbx})
@ 1
'swp(rbx, rax) | rbx == rax == 0'
    MACHINE(ip[0], state{run}, rbx[.], rax[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{rax})
->
    MACHINE(ip[0], state{next}, rbx[.], rax[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{rax})
@ 1
'relabel_units | rbx -> rcx'
    UNIT(prev[_], next[0], r{rbx}),
    UNIT(prev[0], r{rcx})
->
    UNIT(prev[_], next[0], r{rbx}),
    UNIT(prev[0], r{rbx})
@ inf
'add(rbx, rcx) | rbx == 0'
    MACHINE(ip[0], state{run}, rbx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rbx})
->
    MACHINE(ip[0], state{next}, rbx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rbx})
@ 1
'add(rbx, rcx) | rcx == 0'
    MACHINE(ip[0], state{run}, rbx[2], rcx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rbx}, dst{rcx}),
    UNIT(prev[2], r{rbx})
->
    MACHINE(ip[0], state{next}, rbx[.], rcx[2]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rbx}, dst{rcx}),
    UNIT(prev[2], r{rcx})
@ 1
'add(rbx, rcx) | rbx != 0'
    MACHINE(ip[0], state{run}, rbx[2], rcx[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rbx}, dst{rcx}),
    UNIT(prev[2], r{rbx}),
    UNIT(next[.], r{rcx})
->
    MACHINE(ip[0], state{next}, rbx[.], rcx[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rbx}, dst{rcx}),
    UNIT(prev[2], r{rcx}),
    UNIT(next[2], r{rcx})
@ 1
'mov(rbx, rcx) | rbx == 0'
    MACHINE(ip[0], state{run}, rbx[.], rcx[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rbx}, dst{rcx})
->
    MACHINE(ip[0], state{next}, rbx[.], rcx[.]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rbx}, dst{rcx})
@ 1
'mov(rbx, rcx) | rbx != 0, rcx == 0'
    MACHINE(ip[0], state{run}, rbx[2], rcx[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rbx}, dst{rcx}),
    UNIT(prev[2], r{rbx})
->
    MACHINE(ip[0], state{next}, rbx[.], rcx[2]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rbx}, dst{rcx}),
    UNIT(prev[2], r{rcx})
@ 1
'swp(rbx, rcx) | rbx != 0, rcx != 0'
    MACHINE(ip[0], state{run}, rbx[2], rcx[3]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{rcx}),
    UNIT(prev[2], r{rbx}),
    UNIT(prev[3], r{rcx})
->
    MACHINE(ip[0], state{next}, rbx[3], rcx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{rcx}),
    UNIT(prev[2], r{rcx}),
    UNIT(prev[3], r{rbx})
@ 1
'swp(rbx, rcx) | rcx == 0'
    MACHINE(ip[0], state{run}, rbx[2], rcx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{rcx}),
    UNIT(prev[2], r{rbx})
->
    MACHINE(ip[0], state{next}, rbx[.], rcx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{rcx}),
    UNIT(prev[2], r{rcx})
@ 1
'swp(rbx, rcx) | rbx == 0, rcx != 0'
    MACHINE(ip[0], state{run}, rbx[.], rcx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{rcx}),
    UNIT(prev[2], r{rcx})
->
    MACHINE(ip[0], state{next}, rbx[2], rcx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{rcx}),
    UNIT(prev[2], r{rbx})
@ 1
'swp(rbx, rcx) | rbx == rcx == 0'
    MACHINE(ip[0], state{run}, rbx[.], rcx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{rcx})
->
    MACHINE(ip[0], state{next}, rbx[.], rcx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{rcx})
@ 1
'relabel_units | rbx -> _cpy'
    UNIT(prev[_], next[0], r{rbx}),
    UNIT(prev[0], r{_cpy})
->
    UNIT(prev[_], next[0], r{rbx}),
    UNIT(prev[0], r{rbx})
@ inf
'add(rbx, _cpy) | rbx == 0'
    MACHINE(ip[0], state{run}, rbx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rbx})
->
    MACHINE(ip[0], state{next}, rbx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rbx})
@ 1
'add(rbx, _cpy) | _cpy == 0'
    MACHINE(ip[0], state{run}, rbx[2], _cpy[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rbx}, dst{_cpy}),
    UNIT(prev[2], r{rbx})
->
    MACHINE(ip[0], state{next}, rbx[.], _cpy[2]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rbx}, dst{_cpy}),
    UNIT(prev[2], r{_cpy})
@ 1
'add(rbx, _cpy) | rbx != 0'
    MACHINE(ip[0], state{run}, rbx[2], _cpy[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rbx}, dst{_cpy}),
    UNIT(prev[2], r{rbx}),
    UNIT(next[.], r{_cpy})
->
    MACHINE(ip[0], state{next}, rbx[.], _cpy[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rbx}, dst{_cpy}),
    UNIT(prev[2], r{_cpy}),
    UNIT(next[2], r{_cpy})
@ 1
'mov(rbx, _cpy) | rbx == 0'
    MACHINE(ip[0], state{run}, rbx[.], _cpy[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rbx}, dst{_cpy})
->
    MACHINE(ip[0], state{next}, rbx[.], _cpy[.]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rbx}, dst{_cpy})
@ 1
'mov(rbx, _cpy) | rbx != 0, _cpy == 0'
    MACHINE(ip[0], state{run}, rbx[2], _cpy[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rbx}, dst{_cpy}),
    UNIT(prev[2], r{rbx})
->
    MACHINE(ip[0], state{next}, rbx[.], _cpy[2]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rbx}, dst{_cpy}),
    UNIT(prev[2], r{_cpy})
@ 1
'swp(rbx, _cpy) | rbx != 0, _cpy != 0'
    MACHINE(ip[0], state{run}, rbx[2], _cpy[3]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{_cpy}),
    UNIT(prev[2], r{rbx}),
    UNIT(prev[3], r{_cpy})
->
    MACHINE(ip[0], state{next}, rbx[3], _cpy[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{_cpy}),
    UNIT(prev[2], r{_cpy}),
    UNIT(prev[3], r{rbx})
@ 1
'swp(rbx, _cpy) | _cpy == 0'
    MACHINE(ip[0], state{run}, rbx[2], _cpy[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{_cpy}),
    UNIT(prev[2], r{rbx})
->
    MACHINE(ip[0], state{next}, rbx[.], _cpy[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{_cpy}),
    UNIT(prev[2], r{_cpy})
@ 1
'swp(rbx, _cpy) | rbx == 0, _cpy != 0'
    MACHINE(ip[0], state{run}, rbx[.], _cpy[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{_cpy}),
    UNIT(prev[2], r{_cpy})
->
    MACHINE(ip[0], state{next}, rbx[2], _cpy[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{_cpy}),
    UNIT(prev[2], r{rbx})
@ 1
'swp(rbx, _cpy) | rbx == _cpy == 0'
    MACHINE(ip[0], state{run}, rbx[.], _cpy[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{_cpy})
->
    MACHINE(ip[0], state{next}, rbx[.], _cpy[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{_cpy})
@ 1
'relabel_units | rbx -> rdx'
    UNIT(prev[_], next[0], r{rbx}),
    UNIT(prev[0], r{rdx})
->
    UNIT(prev[_], next[0], r{rbx}),
    UNIT(prev[0], r{rbx})
@ inf
'add(rbx, rdx) | rbx == 0'
    MACHINE(ip[0], state{run}, rbx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rbx})
->
    MACHINE(ip[0], state{next}, rbx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rbx})
@ 1
'add(rbx, rdx) | rdx == 0'
    MACHINE(ip[0], state{run}, rbx[2], rdx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rbx}, dst{rdx}),
    UNIT(prev[2], r{rbx})
->
    MACHINE(ip[0], state{next}, rbx[.], rdx[2]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rbx}, dst{rdx}),
    UNIT(prev[2], r{rdx})
@ 1
'add(rbx, rdx) | rbx != 0'
    MACHINE(ip[0], state{run}, rbx[2], rdx[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rbx}, dst{rdx}),
    UNIT(prev[2], r{rbx}),
    UNIT(next[.], r{rdx})
->
    MACHINE(ip[0], state{next}, rbx[.], rdx[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rbx}, dst{rdx}),
    UNIT(prev[2], r{rdx}),
    UNIT(next[2], r{rdx})
@ 1
'mov(rbx, rdx) | rbx == 0'
    MACHINE(ip[0], state{run}, rbx[.], rdx[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rbx}, dst{rdx})
->
    MACHINE(ip[0], state{next}, rbx[.], rdx[.]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rbx}, dst{rdx})
@ 1
'mov(rbx, rdx) | rbx != 0, rdx == 0'
    MACHINE(ip[0], state{run}, rbx[2], rdx[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rbx}, dst{rdx}),
    UNIT(prev[2], r{rbx})
->
    MACHINE(ip[0], state{next}, rbx[.], rdx[2]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rbx}, dst{rdx}),
    UNIT(prev[2], r{rdx})
@ 1
'swp(rbx, rdx) | rbx != 0, rdx != 0'
    MACHINE(ip[0], state{run}, rbx[2], rdx[3]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{rdx}),
    UNIT(prev[2], r{rbx}),
    UNIT(prev[3], r{rdx})
->
    MACHINE(ip[0], state{next}, rbx[3], rdx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{rdx}),
    UNIT(prev[2], r{rdx}),
    UNIT(prev[3], r{rbx})
@ 1
'swp(rbx, rdx) | rdx == 0'
    MACHINE(ip[0], state{run}, rbx[2], rdx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{rdx}),
    UNIT(prev[2], r{rbx})
->
    MACHINE(ip[0], state{next}, rbx[.], rdx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{rdx}),
    UNIT(prev[2], r{rdx})
@ 1
'swp(rbx, rdx) | rbx == 0, rdx != 0'
    MACHINE(ip[0], state{run}, rbx[.], rdx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{rdx}),
    UNIT(prev[2], r{rdx})
->
    MACHINE(ip[0], state{next}, rbx[2], rdx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{rdx}),
    UNIT(prev[2], r{rbx})
@ 1
'swp(rbx, rdx) | rbx == rdx == 0'
    MACHINE(ip[0], state{run}, rbx[.], rdx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{rdx})
->
    MACHINE(ip[0], state{next}, rbx[.], rdx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{rdx})
@ 1
'relabel_units | rbx -> _mul1'
    UNIT(prev[_], next[0], r{rbx}),
    UNIT(prev[0], r{_mul1})
->
    UNIT(prev[_], next[0], r{rbx}),
    UNIT(prev[0], r{rbx})
@ inf
'add(rbx, _mul1) | rbx == 0'
    MACHINE(ip[0], state{run}, rbx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rbx})
->
    MACHINE(ip[0], state{next}, rbx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rbx})
@ 1
'add(rbx, _mul1) | _mul1 == 0'
    MACHINE(ip[0], state{run}, rbx[2], _mul1[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rbx}, dst{_mul1}),
    UNIT(prev[2], r{rbx})
->
    MACHINE(ip[0], state{next}, rbx[.], _mul1[2]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rbx}, dst{_mul1}),
    UNIT(prev[2], r{_mul1})
@ 1
'add(rbx, _mul1) | rbx != 0'
    MACHINE(ip[0], state{run}, rbx[2], _mul1[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rbx}, dst{_mul1}),
    UNIT(prev[2], r{rbx}),
    UNIT(next[.], r{_mul1})
->
    MACHINE(ip[0], state{next}, rbx[.], _mul1[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rbx}, dst{_mul1}),
    UNIT(prev[2], r{_mul1}),
    UNIT(next[2], r{_mul1})
@ 1
'mov(rbx, _mul1) | rbx == 0'
    MACHINE(ip[0], state{run}, rbx[.], _mul1[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rbx}, dst{_mul1})
->
    MACHINE(ip[0], state{next}, rbx[.], _mul1[.]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rbx}, dst{_mul1})
@ 1
'mov(rbx, _mul1) | rbx != 0, _mul1 == 0'
    MACHINE(ip[0], state{run}, rbx[2], _mul1[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rbx}, dst{_mul1}),
    UNIT(prev[2], r{rbx})
->
    MACHINE(ip[0], state{next}, rbx[.], _mul1[2]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rbx}, dst{_mul1}),
    UNIT(prev[2], r{_mul1})
@ 1
'swp(rbx, _mul1) | rbx != 0, _mul1 != 0'
    MACHINE(ip[0], state{run}, rbx[2], _mul1[3]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{_mul1}),
    UNIT(prev[2], r{rbx}),
    UNIT(prev[3], r{_mul1})
->
    MACHINE(ip[0], state{next}, rbx[3], _mul1[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{_mul1}),
    UNIT(prev[2], r{_mul1}),
    UNIT(prev[3], r{rbx})
@ 1
'swp(rbx, _mul1) | _mul1 == 0'
    MACHINE(ip[0], state{run}, rbx[2], _mul1[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{_mul1}),
    UNIT(prev[2], r{rbx})
->
    MACHINE(ip[0], state{next}, rbx[.], _mul1[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{_mul1}),
    UNIT(prev[2], r{_mul1})
@ 1
'swp(rbx, _mul1) | rbx == 0, _mul1 != 0'
    MACHINE(ip[0], state{run}, rbx[.], _mul1[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{_mul1}),
    UNIT(prev[2], r{_mul1})
->
    MACHINE(ip[0], state{next}, rbx[2], _mul1[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{_mul1}),
    UNIT(prev[2], r{rbx})
@ 1
'swp(rbx, _mul1) | rbx == _mul1 == 0'
    MACHINE(ip[0], state{run}, rbx[.], _mul1[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{_mul1})
->
    MACHINE(ip[0], state{next}, rbx[.], _mul1[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{_mul1})
@ 1
'relabel_units | rbx -> _mul2'
    UNIT(prev[_], next[0], r{rbx}),
    UNIT(prev[0], r{_mul2})
->
    UNIT(prev[_], next[0], r{rbx}),
    UNIT(prev[0], r{rbx})
@ inf
'add(rbx, _mul2) | rbx == 0'
    MACHINE(ip[0], state{run}, rbx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rbx})
->
    MACHINE(ip[0], state{next}, rbx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rbx})
@ 1
'add(rbx, _mul2) | _mul2 == 0'
    MACHINE(ip[0], state{run}, rbx[2], _mul2[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rbx}, dst{_mul2}),
    UNIT(prev[2], r{rbx})
->
    MACHINE(ip[0], state{next}, rbx[.], _mul2[2]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rbx}, dst{_mul2}),
    UNIT(prev[2], r{_mul2})
@ 1
'add(rbx, _mul2) | rbx != 0'
    MACHINE(ip[0], state{run}, rbx[2], _mul2[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rbx}, dst{_mul2}),
    UNIT(prev[2], r{rbx}),
    UNIT(next[.], r{_mul2})
->
    MACHINE(ip[0], state{next}, rbx[.], _mul2[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rbx}, dst{_mul2}),
    UNIT(prev[2], r{_mul2}),
    UNIT(next[2], r{_mul2})
@ 1
'mov(rbx, _mul2) | rbx == 0'
    MACHINE(ip[0], state{run}, rbx[.], _mul2[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rbx}, dst{_mul2})
->
    MACHINE(ip[0], state{next}, rbx[.], _mul2[.]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rbx}, dst{_mul2})
@ 1
'mov(rbx, _mul2) | rbx != 0, _mul2 == 0'
    MACHINE(ip[0], state{run}, rbx[2], _mul2[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rbx}, dst{_mul2}),
    UNIT(prev[2], r{rbx})
->
    MACHINE(ip[0], state{next}, rbx[.], _mul2[2]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rbx}, dst{_mul2}),
    UNIT(prev[2], r{_mul2})
@ 1
'swp(rbx, _mul2) | rbx != 0, _mul2 != 0'
    MACHINE(ip[0], state{run}, rbx[2], _mul2[3]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{_mul2}),
    UNIT(prev[2], r{rbx}),
    UNIT(prev[3], r{_mul2})
->
    MACHINE(ip[0], state{next}, rbx[3], _mul2[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{_mul2}),
    UNIT(prev[2], r{_mul2}),
    UNIT(prev[3], r{rbx})
@ 1
'swp(rbx, _mul2) | _mul2 == 0'
    MACHINE(ip[0], state{run}, rbx[2], _mul2[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{_mul2}),
    UNIT(prev[2], r{rbx})
->
    MACHINE(ip[0], state{next}, rbx[.], _mul2[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{_mul2}),
    UNIT(prev[2], r{_mul2})
@ 1
'swp(rbx, _mul2) | rbx == 0, _mul2 != 0'
    MACHINE(ip[0], state{run}, rbx[.], _mul2[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{_mul2}),
    UNIT(prev[2], r{_mul2})
->
    MACHINE(ip[0], state{next}, rbx[2], _mul2[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{_mul2}),
    UNIT(prev[2], r{rbx})
@ 1
'swp(rbx, _mul2) | rbx == _mul2 == 0'
    MACHINE(ip[0], state{run}, rbx[.], _mul2[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{_mul2})
->
    MACHINE(ip[0], state{next}, rbx[.], _mul2[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rbx}, dst{_mul2})
@ 1
'relabel_units | rax -> rbx'
    UNIT(prev[_], next[0], r{rax}),
    UNIT(prev[0], r{rbx})
->
    UNIT(prev[_], next[0], r{rax}),
    UNIT(prev[0], r{rax})
@ inf
'add(rax, rbx) | rax == 0'
    MACHINE(ip[0], state{run}, rax[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rax})
->
    MACHINE(ip[0], state{next}, rax[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rax})
@ 1
'add(rax, rbx) | rbx == 0'
    MACHINE(ip[0], state{run}, rax[2], rbx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rax}, dst{rbx}),
    UNIT(prev[2], r{rax})
->
    MACHINE(ip[0], state{next}, rax[.], rbx[2]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rax}, dst{rbx}),
    UNIT(prev[2], r{rbx})
@ 1
'add(rax, rbx) | rax != 0'
    MACHINE(ip[0], state{run}, rax[2], rbx[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rax}, dst{rbx}),
    UNIT(prev[2], r{rax}),
    UNIT(next[.], r{rbx})
->
    MACHINE(ip[0], state{next}, rax[.], rbx[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rax}, dst{rbx}),
    UNIT(prev[2], r{rbx}),
    UNIT(next[2], r{rbx})
@ 1
'mov(rax, rbx) | rax == 0'
    MACHINE(ip[0], state{run}, rax[.], rbx[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rax}, dst{rbx})
->
    MACHINE(ip[0], state{next}, rax[.], rbx[.]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rax}, dst{rbx})
@ 1
'mov(rax, rbx) | rax != 0, rbx == 0'
    MACHINE(ip[0], state{run}, rax[2], rbx[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rax}, dst{rbx}),
    UNIT(prev[2], r{rax})
->
    MACHINE(ip[0], state{next}, rax[.], rbx[2]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rax}, dst{rbx}),
    UNIT(prev[2], r{rbx})
@ 1
'swp(rax, rbx) | rax != 0, rbx != 0'
    MACHINE(ip[0], state{run}, rax[2], rbx[3]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{rbx}),
    UNIT(prev[2], r{rax}),
    UNIT(prev[3], r{rbx})
->
    MACHINE(ip[0], state{next}, rax[3], rbx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{rbx}),
    UNIT(prev[2], r{rbx}),
    UNIT(prev[3], r{rax})
@ 1
'swp(rax, rbx) | rbx == 0'
    MACHINE(ip[0], state{run}, rax[2], rbx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{rbx}),
    UNIT(prev[2], r{rax})
->
    MACHINE(ip[0], state{next}, rax[.], rbx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{rbx}),
    UNIT(prev[2], r{rbx})
@ 1
'swp(rax, rbx) | rax == 0, rbx != 0'
    MACHINE(ip[0], state{run}, rax[.], rbx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{rbx}),
    UNIT(prev[2], r{rbx})
->
    MACHINE(ip[0], state{next}, rax[2], rbx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{rbx}),
    UNIT(prev[2], r{rax})
@ 1
'swp(rax, rbx) | rax == rbx == 0'
    MACHINE(ip[0], state{run}, rax[.], rbx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{rbx})
->
    MACHINE(ip[0], state{next}, rax[.], rbx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{rbx})
@ 1
'relabel_units | rax -> rcx'
    UNIT(prev[_], next[0], r{rax}),
    UNIT(prev[0], r{rcx})
->
    UNIT(prev[_], next[0], r{rax}),
    UNIT(prev[0], r{rax})
@ inf
'add(rax, rcx) | rax == 0'
    MACHINE(ip[0], state{run}, rax[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rax})
->
    MACHINE(ip[0], state{next}, rax[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rax})
@ 1
'add(rax, rcx) | rcx == 0'
    MACHINE(ip[0], state{run}, rax[2], rcx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rax}, dst{rcx}),
    UNIT(prev[2], r{rax})
->
    MACHINE(ip[0], state{next}, rax[.], rcx[2]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rax}, dst{rcx}),
    UNIT(prev[2], r{rcx})
@ 1
'add(rax, rcx) | rax != 0'
    MACHINE(ip[0], state{run}, rax[2], rcx[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rax}, dst{rcx}),
    UNIT(prev[2], r{rax}),
    UNIT(next[.], r{rcx})
->
    MACHINE(ip[0], state{next}, rax[.], rcx[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rax}, dst{rcx}),
    UNIT(prev[2], r{rcx}),
    UNIT(next[2], r{rcx})
@ 1
'mov(rax, rcx) | rax == 0'
    MACHINE(ip[0], state{run}, rax[.], rcx[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rax}, dst{rcx})
->
    MACHINE(ip[0], state{next}, rax[.], rcx[.]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rax}, dst{rcx})
@ 1
'mov(rax, rcx) | rax != 0, rcx == 0'
    MACHINE(ip[0], state{run}, rax[2], rcx[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rax}, dst{rcx}),
    UNIT(prev[2], r{rax})
->
    MACHINE(ip[0], state{next}, rax[.], rcx[2]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rax}, dst{rcx}),
    UNIT(prev[2], r{rcx})
@ 1
'swp(rax, rcx) | rax != 0, rcx != 0'
    MACHINE(ip[0], state{run}, rax[2], rcx[3]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{rcx}),
    UNIT(prev[2], r{rax}),
    UNIT(prev[3], r{rcx})
->
    MACHINE(ip[0], state{next}, rax[3], rcx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{rcx}),
    UNIT(prev[2], r{rcx}),
    UNIT(prev[3], r{rax})
@ 1
'swp(rax, rcx) | rcx == 0'
    MACHINE(ip[0], state{run}, rax[2], rcx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{rcx}),
    UNIT(prev[2], r{rax})
->
    MACHINE(ip[0], state{next}, rax[.], rcx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{rcx}),
    UNIT(prev[2], r{rcx})
@ 1
'swp(rax, rcx) | rax == 0, rcx != 0'
    MACHINE(ip[0], state{run}, rax[.], rcx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{rcx}),
    UNIT(prev[2], r{rcx})
->
    MACHINE(ip[0], state{next}, rax[2], rcx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{rcx}),
    UNIT(prev[2], r{rax})
@ 1
'swp(rax, rcx) | rax == rcx == 0'
    MACHINE(ip[0], state{run}, rax[.], rcx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{rcx})
->
    MACHINE(ip[0], state{next}, rax[.], rcx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{rcx})
@ 1
'relabel_units | rax -> _cpy'
    UNIT(prev[_], next[0], r{rax}),
    UNIT(prev[0], r{_cpy})
->
    UNIT(prev[_], next[0], r{rax}),
    UNIT(prev[0], r{rax})
@ inf
'add(rax, _cpy) | rax == 0'
    MACHINE(ip[0], state{run}, rax[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rax})
->
    MACHINE(ip[0], state{next}, rax[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rax})
@ 1
'add(rax, _cpy) | _cpy == 0'
    MACHINE(ip[0], state{run}, rax[2], _cpy[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rax}, dst{_cpy}),
    UNIT(prev[2], r{rax})
->
    MACHINE(ip[0], state{next}, rax[.], _cpy[2]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rax}, dst{_cpy}),
    UNIT(prev[2], r{_cpy})
@ 1
'add(rax, _cpy) | rax != 0'
    MACHINE(ip[0], state{run}, rax[2], _cpy[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rax}, dst{_cpy}),
    UNIT(prev[2], r{rax}),
    UNIT(next[.], r{_cpy})
->
    MACHINE(ip[0], state{next}, rax[.], _cpy[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rax}, dst{_cpy}),
    UNIT(prev[2], r{_cpy}),
    UNIT(next[2], r{_cpy})
@ 1
'mov(rax, _cpy) | rax == 0'
    MACHINE(ip[0], state{run}, rax[.], _cpy[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rax}, dst{_cpy})
->
    MACHINE(ip[0], state{next}, rax[.], _cpy[.]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rax}, dst{_cpy})
@ 1
'mov(rax, _cpy) | rax != 0, _cpy == 0'
    MACHINE(ip[0], state{run}, rax[2], _cpy[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rax}, dst{_cpy}),
    UNIT(prev[2], r{rax})
->
    MACHINE(ip[0], state{next}, rax[.], _cpy[2]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rax}, dst{_cpy}),
    UNIT(prev[2], r{_cpy})
@ 1
'swp(rax, _cpy) | rax != 0, _cpy != 0'
    MACHINE(ip[0], state{run}, rax[2], _cpy[3]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{_cpy}),
    UNIT(prev[2], r{rax}),
    UNIT(prev[3], r{_cpy})
->
    MACHINE(ip[0], state{next}, rax[3], _cpy[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{_cpy}),
    UNIT(prev[2], r{_cpy}),
    UNIT(prev[3], r{rax})
@ 1
'swp(rax, _cpy) | _cpy == 0'
    MACHINE(ip[0], state{run}, rax[2], _cpy[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{_cpy}),
    UNIT(prev[2], r{rax})
->
    MACHINE(ip[0], state{next}, rax[.], _cpy[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{_cpy}),
    UNIT(prev[2], r{_cpy})
@ 1
'swp(rax, _cpy) | rax == 0, _cpy != 0'
    MACHINE(ip[0], state{run}, rax[.], _cpy[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{_cpy}),
    UNIT(prev[2], r{_cpy})
->
    MACHINE(ip[0], state{next}, rax[2], _cpy[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{_cpy}),
    UNIT(prev[2], r{rax})
@ 1
'swp(rax, _cpy) | rax == _cpy == 0'
    MACHINE(ip[0], state{run}, rax[.], _cpy[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{_cpy})
->
    MACHINE(ip[0], state{next}, rax[.], _cpy[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{_cpy})
@ 1
'relabel_units | rax -> rdx'
    UNIT(prev[_], next[0], r{rax}),
    UNIT(prev[0], r{rdx})
->
    UNIT(prev[_], next[0], r{rax}),
    UNIT(prev[0], r{rax})
@ inf
'add(rax, rdx) | rax == 0'
    MACHINE(ip[0], state{run}, rax[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rax})
->
    MACHINE(ip[0], state{next}, rax[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rax})
@ 1
'add(rax, rdx) | rdx == 0'
    MACHINE(ip[0], state{run}, rax[2], rdx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rax}, dst{rdx}),
    UNIT(prev[2], r{rax})
->
    MACHINE(ip[0], state{next}, rax[.], rdx[2]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rax}, dst{rdx}),
    UNIT(prev[2], r{rdx})
@ 1
'add(rax, rdx) | rax != 0'
    MACHINE(ip[0], state{run}, rax[2], rdx[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rax}, dst{rdx}),
    UNIT(prev[2], r{rax}),
    UNIT(next[.], r{rdx})
->
    MACHINE(ip[0], state{next}, rax[.], rdx[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rax}, dst{rdx}),
    UNIT(prev[2], r{rdx}),
    UNIT(next[2], r{rdx})
@ 1
'mov(rax, rdx) | rax == 0'
    MACHINE(ip[0], state{run}, rax[.], rdx[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rax}, dst{rdx})
->
    MACHINE(ip[0], state{next}, rax[.], rdx[.]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rax}, dst{rdx})
@ 1
'mov(rax, rdx) | rax != 0, rdx == 0'
    MACHINE(ip[0], state{run}, rax[2], rdx[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rax}, dst{rdx}),
    UNIT(prev[2], r{rax})
->
    MACHINE(ip[0], state{next}, rax[.], rdx[2]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rax}, dst{rdx}),
    UNIT(prev[2], r{rdx})
@ 1
'swp(rax, rdx) | rax != 0, rdx != 0'
    MACHINE(ip[0], state{run}, rax[2], rdx[3]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{rdx}),
    UNIT(prev[2], r{rax}),
    UNIT(prev[3], r{rdx})
->
    MACHINE(ip[0], state{next}, rax[3], rdx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{rdx}),
    UNIT(prev[2], r{rdx}),
    UNIT(prev[3], r{rax})
@ 1
'swp(rax, rdx) | rdx == 0'
    MACHINE(ip[0], state{run}, rax[2], rdx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{rdx}),
    UNIT(prev[2], r{rax})
->
    MACHINE(ip[0], state{next}, rax[.], rdx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{rdx}),
    UNIT(prev[2], r{rdx})
@ 1
'swp(rax, rdx) | rax == 0, rdx != 0'
    MACHINE(ip[0], state{run}, rax[.], rdx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{rdx}),
    UNIT(prev[2], r{rdx})
->
    MACHINE(ip[0], state{next}, rax[2], rdx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{rdx}),
    UNIT(prev[2], r{rax})
@ 1
'swp(rax, rdx) | rax == rdx == 0'
    MACHINE(ip[0], state{run}, rax[.], rdx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{rdx})
->
    MACHINE(ip[0], state{next}, rax[.], rdx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{rdx})
@ 1
'relabel_units | rax -> _mul1'
    UNIT(prev[_], next[0], r{rax}),
    UNIT(prev[0], r{_mul1})
->
    UNIT(prev[_], next[0], r{rax}),
    UNIT(prev[0], r{rax})
@ inf
'add(rax, _mul1) | rax == 0'
    MACHINE(ip[0], state{run}, rax[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rax})
->
    MACHINE(ip[0], state{next}, rax[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rax})
@ 1
'add(rax, _mul1) | _mul1 == 0'
    MACHINE(ip[0], state{run}, rax[2], _mul1[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rax}, dst{_mul1}),
    UNIT(prev[2], r{rax})
->
    MACHINE(ip[0], state{next}, rax[.], _mul1[2]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rax}, dst{_mul1}),
    UNIT(prev[2], r{_mul1})
@ 1
'add(rax, _mul1) | rax != 0'
    MACHINE(ip[0], state{run}, rax[2], _mul1[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rax}, dst{_mul1}),
    UNIT(prev[2], r{rax}),
    UNIT(next[.], r{_mul1})
->
    MACHINE(ip[0], state{next}, rax[.], _mul1[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rax}, dst{_mul1}),
    UNIT(prev[2], r{_mul1}),
    UNIT(next[2], r{_mul1})
@ 1
'mov(rax, _mul1) | rax == 0'
    MACHINE(ip[0], state{run}, rax[.], _mul1[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rax}, dst{_mul1})
->
    MACHINE(ip[0], state{next}, rax[.], _mul1[.]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rax}, dst{_mul1})
@ 1
'mov(rax, _mul1) | rax != 0, _mul1 == 0'
    MACHINE(ip[0], state{run}, rax[2], _mul1[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rax}, dst{_mul1}),
    UNIT(prev[2], r{rax})
->
    MACHINE(ip[0], state{next}, rax[.], _mul1[2]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rax}, dst{_mul1}),
    UNIT(prev[2], r{_mul1})
@ 1
'swp(rax, _mul1) | rax != 0, _mul1 != 0'
    MACHINE(ip[0], state{run}, rax[2], _mul1[3]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{_mul1}),
    UNIT(prev[2], r{rax}),
    UNIT(prev[3], r{_mul1})
->
    MACHINE(ip[0], state{next}, rax[3], _mul1[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{_mul1}),
    UNIT(prev[2], r{_mul1}),
    UNIT(prev[3], r{rax})
@ 1
'swp(rax, _mul1) | _mul1 == 0'
    MACHINE(ip[0], state{run}, rax[2], _mul1[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{_mul1}),
    UNIT(prev[2], r{rax})
->
    MACHINE(ip[0], state{next}, rax[.], _mul1[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{_mul1}),
    UNIT(prev[2], r{_mul1})
@ 1
'swp(rax, _mul1) | rax == 0, _mul1 != 0'
    MACHINE(ip[0], state{run}, rax[.], _mul1[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{_mul1}),
    UNIT(prev[2], r{_mul1})
->
    MACHINE(ip[0], state{next}, rax[2], _mul1[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{_mul1}),
    UNIT(prev[2], r{rax})
@ 1
'swp(rax, _mul1) | rax == _mul1 == 0'
    MACHINE(ip[0], state{run}, rax[.], _mul1[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{_mul1})
->
    MACHINE(ip[0], state{next}, rax[.], _mul1[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{_mul1})
@ 1
'relabel_units | rax -> _mul2'
    UNIT(prev[_], next[0], r{rax}),
    UNIT(prev[0], r{_mul2})
->
    UNIT(prev[_], next[0], r{rax}),
    UNIT(prev[0], r{rax})
@ inf
'add(rax, _mul2) | rax == 0'
    MACHINE(ip[0], state{run}, rax[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rax})
->
    MACHINE(ip[0], state{next}, rax[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rax})
@ 1
'add(rax, _mul2) | _mul2 == 0'
    MACHINE(ip[0], state{run}, rax[2], _mul2[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rax}, dst{_mul2}),
    UNIT(prev[2], r{rax})
->
    MACHINE(ip[0], state{next}, rax[.], _mul2[2]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rax}, dst{_mul2}),
    UNIT(prev[2], r{_mul2})
@ 1
'add(rax, _mul2) | rax != 0'
    MACHINE(ip[0], state{run}, rax[2], _mul2[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rax}, dst{_mul2}),
    UNIT(prev[2], r{rax}),
    UNIT(next[.], r{_mul2})
->
    MACHINE(ip[0], state{next}, rax[.], _mul2[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rax}, dst{_mul2}),
    UNIT(prev[2], r{_mul2}),
    UNIT(next[2], r{_mul2})
@ 1
'mov(rax, _mul2) | rax == 0'
    MACHINE(ip[0], state{run}, rax[.], _mul2[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rax}, dst{_mul2})
->
    MACHINE(ip[0], state{next}, rax[.], _mul2[.]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rax}, dst{_mul2})
@ 1
'mov(rax, _mul2) | rax != 0, _mul2 == 0'
    MACHINE(ip[0], state{run}, rax[2], _mul2[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rax}, dst{_mul2}),
    UNIT(prev[2], r{rax})
->
    MACHINE(ip[0], state{next}, rax[.], _mul2[2]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rax}, dst{_mul2}),
    UNIT(prev[2], r{_mul2})
@ 1
'swp(rax, _mul2) | rax != 0, _mul2 != 0'
    MACHINE(ip[0], state{run}, rax[2], _mul2[3]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{_mul2}),
    UNIT(prev[2], r{rax}),
    UNIT(prev[3], r{_mul2})
->
    MACHINE(ip[0], state{next}, rax[3], _mul2[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{_mul2}),
    UNIT(prev[2], r{_mul2}),
    UNIT(prev[3], r{rax})
@ 1
'swp(rax, _mul2) | _mul2 == 0'
    MACHINE(ip[0], state{run}, rax[2], _mul2[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{_mul2}),
    UNIT(prev[2], r{rax})
->
    MACHINE(ip[0], state{next}, rax[.], _mul2[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{_mul2}),
    UNIT(prev[2], r{_mul2})
@ 1
'swp(rax, _mul2) | rax == 0, _mul2 != 0'
    MACHINE(ip[0], state{run}, rax[.], _mul2[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{_mul2}),
    UNIT(prev[2], r{_mul2})
->
    MACHINE(ip[0], state{next}, rax[2], _mul2[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{_mul2}),
    UNIT(prev[2], r{rax})
@ 1
'swp(rax, _mul2) | rax == _mul2 == 0'
    MACHINE(ip[0], state{run}, rax[.], _mul2[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{_mul2})
->
    MACHINE(ip[0], state{next}, rax[.], _mul2[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rax}, dst{_mul2})
@ 1
'relabel_units | rcx -> rbx'
    UNIT(prev[_], next[0], r{rcx}),
    UNIT(prev[0], r{rbx})
->
    UNIT(prev[_], next[0], r{rcx}),
    UNIT(prev[0], r{rcx})
@ inf
'add(rcx, rbx) | rcx == 0'
    MACHINE(ip[0], state{run}, rcx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rcx})
->
    MACHINE(ip[0], state{next}, rcx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rcx})
@ 1
'add(rcx, rbx) | rbx == 0'
    MACHINE(ip[0], state{run}, rcx[2], rbx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rcx}, dst{rbx}),
    UNIT(prev[2], r{rcx})
->
    MACHINE(ip[0], state{next}, rcx[.], rbx[2]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rcx}, dst{rbx}),
    UNIT(prev[2], r{rbx})
@ 1
'add(rcx, rbx) | rcx != 0'
    MACHINE(ip[0], state{run}, rcx[2], rbx[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rcx}, dst{rbx}),
    UNIT(prev[2], r{rcx}),
    UNIT(next[.], r{rbx})
->
    MACHINE(ip[0], state{next}, rcx[.], rbx[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rcx}, dst{rbx}),
    UNIT(prev[2], r{rbx}),
    UNIT(next[2], r{rbx})
@ 1
'mov(rcx, rbx) | rcx == 0'
    MACHINE(ip[0], state{run}, rcx[.], rbx[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rcx}, dst{rbx})
->
    MACHINE(ip[0], state{next}, rcx[.], rbx[.]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rcx}, dst{rbx})
@ 1
'mov(rcx, rbx) | rcx != 0, rbx == 0'
    MACHINE(ip[0], state{run}, rcx[2], rbx[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rcx}, dst{rbx}),
    UNIT(prev[2], r{rcx})
->
    MACHINE(ip[0], state{next}, rcx[.], rbx[2]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rcx}, dst{rbx}),
    UNIT(prev[2], r{rbx})
@ 1
'swp(rcx, rbx) | rcx != 0, rbx != 0'
    MACHINE(ip[0], state{run}, rcx[2], rbx[3]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{rbx}),
    UNIT(prev[2], r{rcx}),
    UNIT(prev[3], r{rbx})
->
    MACHINE(ip[0], state{next}, rcx[3], rbx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{rbx}),
    UNIT(prev[2], r{rbx}),
    UNIT(prev[3], r{rcx})
@ 1
'swp(rcx, rbx) | rbx == 0'
    MACHINE(ip[0], state{run}, rcx[2], rbx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{rbx}),
    UNIT(prev[2], r{rcx})
->
    MACHINE(ip[0], state{next}, rcx[.], rbx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{rbx}),
    UNIT(prev[2], r{rbx})
@ 1
'swp(rcx, rbx) | rcx == 0, rbx != 0'
    MACHINE(ip[0], state{run}, rcx[.], rbx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{rbx}),
    UNIT(prev[2], r{rbx})
->
    MACHINE(ip[0], state{next}, rcx[2], rbx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{rbx}),
    UNIT(prev[2], r{rcx})
@ 1
'swp(rcx, rbx) | rcx == rbx == 0'
    MACHINE(ip[0], state{run}, rcx[.], rbx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{rbx})
->
    MACHINE(ip[0], state{next}, rcx[.], rbx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{rbx})
@ 1
'relabel_units | rcx -> rax'
    UNIT(prev[_], next[0], r{rcx}),
    UNIT(prev[0], r{rax})
->
    UNIT(prev[_], next[0], r{rcx}),
    UNIT(prev[0], r{rcx})
@ inf
'add(rcx, rax) | rcx == 0'
    MACHINE(ip[0], state{run}, rcx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rcx})
->
    MACHINE(ip[0], state{next}, rcx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rcx})
@ 1
'add(rcx, rax) | rax == 0'
    MACHINE(ip[0], state{run}, rcx[2], rax[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rcx}, dst{rax}),
    UNIT(prev[2], r{rcx})
->
    MACHINE(ip[0], state{next}, rcx[.], rax[2]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rcx}, dst{rax}),
    UNIT(prev[2], r{rax})
@ 1
'add(rcx, rax) | rcx != 0'
    MACHINE(ip[0], state{run}, rcx[2], rax[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rcx}, dst{rax}),
    UNIT(prev[2], r{rcx}),
    UNIT(next[.], r{rax})
->
    MACHINE(ip[0], state{next}, rcx[.], rax[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rcx}, dst{rax}),
    UNIT(prev[2], r{rax}),
    UNIT(next[2], r{rax})
@ 1
'mov(rcx, rax) | rcx == 0'
    MACHINE(ip[0], state{run}, rcx[.], rax[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rcx}, dst{rax})
->
    MACHINE(ip[0], state{next}, rcx[.], rax[.]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rcx}, dst{rax})
@ 1
'mov(rcx, rax) | rcx != 0, rax == 0'
    MACHINE(ip[0], state{run}, rcx[2], rax[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rcx}, dst{rax}),
    UNIT(prev[2], r{rcx})
->
    MACHINE(ip[0], state{next}, rcx[.], rax[2]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rcx}, dst{rax}),
    UNIT(prev[2], r{rax})
@ 1
'swp(rcx, rax) | rcx != 0, rax != 0'
    MACHINE(ip[0], state{run}, rcx[2], rax[3]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{rax}),
    UNIT(prev[2], r{rcx}),
    UNIT(prev[3], r{rax})
->
    MACHINE(ip[0], state{next}, rcx[3], rax[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{rax}),
    UNIT(prev[2], r{rax}),
    UNIT(prev[3], r{rcx})
@ 1
'swp(rcx, rax) | rax == 0'
    MACHINE(ip[0], state{run}, rcx[2], rax[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{rax}),
    UNIT(prev[2], r{rcx})
->
    MACHINE(ip[0], state{next}, rcx[.], rax[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{rax}),
    UNIT(prev[2], r{rax})
@ 1
'swp(rcx, rax) | rcx == 0, rax != 0'
    MACHINE(ip[0], state{run}, rcx[.], rax[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{rax}),
    UNIT(prev[2], r{rax})
->
    MACHINE(ip[0], state{next}, rcx[2], rax[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{rax}),
    UNIT(prev[2], r{rcx})
@ 1
'swp(rcx, rax) | rcx == rax == 0'
    MACHINE(ip[0], state{run}, rcx[.], rax[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{rax})
->
    MACHINE(ip[0], state{next}, rcx[.], rax[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{rax})
@ 1
'relabel_units | rcx -> _cpy'
    UNIT(prev[_], next[0], r{rcx}),
    UNIT(prev[0], r{_cpy})
->
    UNIT(prev[_], next[0], r{rcx}),
    UNIT(prev[0], r{rcx})
@ inf
'add(rcx, _cpy) | rcx == 0'
    MACHINE(ip[0], state{run}, rcx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rcx})
->
    MACHINE(ip[0], state{next}, rcx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rcx})
@ 1
'add(rcx, _cpy) | _cpy == 0'
    MACHINE(ip[0], state{run}, rcx[2], _cpy[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rcx}, dst{_cpy}),
    UNIT(prev[2], r{rcx})
->
    MACHINE(ip[0], state{next}, rcx[.], _cpy[2]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rcx}, dst{_cpy}),
    UNIT(prev[2], r{_cpy})
@ 1
'add(rcx, _cpy) | rcx != 0'
    MACHINE(ip[0], state{run}, rcx[2], _cpy[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rcx}, dst{_cpy}),
    UNIT(prev[2], r{rcx}),
    UNIT(next[.], r{_cpy})
->
    MACHINE(ip[0], state{next}, rcx[.], _cpy[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rcx}, dst{_cpy}),
    UNIT(prev[2], r{_cpy}),
    UNIT(next[2], r{_cpy})
@ 1
'mov(rcx, _cpy) | rcx == 0'
    MACHINE(ip[0], state{run}, rcx[.], _cpy[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rcx}, dst{_cpy})
->
    MACHINE(ip[0], state{next}, rcx[.], _cpy[.]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rcx}, dst{_cpy})
@ 1
'mov(rcx, _cpy) | rcx != 0, _cpy == 0'
    MACHINE(ip[0], state{run}, rcx[2], _cpy[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rcx}, dst{_cpy}),
    UNIT(prev[2], r{rcx})
->
    MACHINE(ip[0], state{next}, rcx[.], _cpy[2]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rcx}, dst{_cpy}),
    UNIT(prev[2], r{_cpy})
@ 1
'swp(rcx, _cpy) | rcx != 0, _cpy != 0'
    MACHINE(ip[0], state{run}, rcx[2], _cpy[3]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{_cpy}),
    UNIT(prev[2], r{rcx}),
    UNIT(prev[3], r{_cpy})
->
    MACHINE(ip[0], state{next}, rcx[3], _cpy[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{_cpy}),
    UNIT(prev[2], r{_cpy}),
    UNIT(prev[3], r{rcx})
@ 1
'swp(rcx, _cpy) | _cpy == 0'
    MACHINE(ip[0], state{run}, rcx[2], _cpy[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{_cpy}),
    UNIT(prev[2], r{rcx})
->
    MACHINE(ip[0], state{next}, rcx[.], _cpy[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{_cpy}),
    UNIT(prev[2], r{_cpy})
@ 1
'swp(rcx, _cpy) | rcx == 0, _cpy != 0'
    MACHINE(ip[0], state{run}, rcx[.], _cpy[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{_cpy}),
    UNIT(prev[2], r{_cpy})
->
    MACHINE(ip[0], state{next}, rcx[2], _cpy[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{_cpy}),
    UNIT(prev[2], r{rcx})
@ 1
'swp(rcx, _cpy) | rcx == _cpy == 0'
    MACHINE(ip[0], state{run}, rcx[.], _cpy[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{_cpy})
->
    MACHINE(ip[0], state{next}, rcx[.], _cpy[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{_cpy})
@ 1
'relabel_units | rcx -> rdx'
    UNIT(prev[_], next[0], r{rcx}),
    UNIT(prev[0], r{rdx})
->
    UNIT(prev[_], next[0], r{rcx}),
    UNIT(prev[0], r{rcx})
@ inf
'add(rcx, rdx) | rcx == 0'
    MACHINE(ip[0], state{run}, rcx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rcx})
->
    MACHINE(ip[0], state{next}, rcx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rcx})
@ 1
'add(rcx, rdx) | rdx == 0'
    MACHINE(ip[0], state{run}, rcx[2], rdx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rcx}, dst{rdx}),
    UNIT(prev[2], r{rcx})
->
    MACHINE(ip[0], state{next}, rcx[.], rdx[2]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rcx}, dst{rdx}),
    UNIT(prev[2], r{rdx})
@ 1
'add(rcx, rdx) | rcx != 0'
    MACHINE(ip[0], state{run}, rcx[2], rdx[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rcx}, dst{rdx}),
    UNIT(prev[2], r{rcx}),
    UNIT(next[.], r{rdx})
->
    MACHINE(ip[0], state{next}, rcx[.], rdx[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rcx}, dst{rdx}),
    UNIT(prev[2], r{rdx}),
    UNIT(next[2], r{rdx})
@ 1
'mov(rcx, rdx) | rcx == 0'
    MACHINE(ip[0], state{run}, rcx[.], rdx[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rcx}, dst{rdx})
->
    MACHINE(ip[0], state{next}, rcx[.], rdx[.]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rcx}, dst{rdx})
@ 1
'mov(rcx, rdx) | rcx != 0, rdx == 0'
    MACHINE(ip[0], state{run}, rcx[2], rdx[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rcx}, dst{rdx}),
    UNIT(prev[2], r{rcx})
->
    MACHINE(ip[0], state{next}, rcx[.], rdx[2]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rcx}, dst{rdx}),
    UNIT(prev[2], r{rdx})
@ 1
'swp(rcx, rdx) | rcx != 0, rdx != 0'
    MACHINE(ip[0], state{run}, rcx[2], rdx[3]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{rdx}),
    UNIT(prev[2], r{rcx}),
    UNIT(prev[3], r{rdx})
->
    MACHINE(ip[0], state{next}, rcx[3], rdx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{rdx}),
    UNIT(prev[2], r{rdx}),
    UNIT(prev[3], r{rcx})
@ 1
'swp(rcx, rdx) | rdx == 0'
    MACHINE(ip[0], state{run}, rcx[2], rdx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{rdx}),
    UNIT(prev[2], r{rcx})
->
    MACHINE(ip[0], state{next}, rcx[.], rdx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{rdx}),
    UNIT(prev[2], r{rdx})
@ 1
'swp(rcx, rdx) | rcx == 0, rdx != 0'
    MACHINE(ip[0], state{run}, rcx[.], rdx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{rdx}),
    UNIT(prev[2], r{rdx})
->
    MACHINE(ip[0], state{next}, rcx[2], rdx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{rdx}),
    UNIT(prev[2], r{rcx})
@ 1
'swp(rcx, rdx) | rcx == rdx == 0'
    MACHINE(ip[0], state{run}, rcx[.], rdx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{rdx})
->
    MACHINE(ip[0], state{next}, rcx[.], rdx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{rdx})
@ 1
'relabel_units | rcx -> _mul1'
    UNIT(prev[_], next[0], r{rcx}),
    UNIT(prev[0], r{_mul1})
->
    UNIT(prev[_], next[0], r{rcx}),
    UNIT(prev[0], r{rcx})
@ inf
'add(rcx, _mul1) | rcx == 0'
    MACHINE(ip[0], state{run}, rcx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rcx})
->
    MACHINE(ip[0], state{next}, rcx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rcx})
@ 1
'add(rcx, _mul1) | _mul1 == 0'
    MACHINE(ip[0], state{run}, rcx[2], _mul1[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rcx}, dst{_mul1}),
    UNIT(prev[2], r{rcx})
->
    MACHINE(ip[0], state{next}, rcx[.], _mul1[2]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rcx}, dst{_mul1}),
    UNIT(prev[2], r{_mul1})
@ 1
'add(rcx, _mul1) | rcx != 0'
    MACHINE(ip[0], state{run}, rcx[2], _mul1[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rcx}, dst{_mul1}),
    UNIT(prev[2], r{rcx}),
    UNIT(next[.], r{_mul1})
->
    MACHINE(ip[0], state{next}, rcx[.], _mul1[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rcx}, dst{_mul1}),
    UNIT(prev[2], r{_mul1}),
    UNIT(next[2], r{_mul1})
@ 1
'mov(rcx, _mul1) | rcx == 0'
    MACHINE(ip[0], state{run}, rcx[.], _mul1[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rcx}, dst{_mul1})
->
    MACHINE(ip[0], state{next}, rcx[.], _mul1[.]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rcx}, dst{_mul1})
@ 1
'mov(rcx, _mul1) | rcx != 0, _mul1 == 0'
    MACHINE(ip[0], state{run}, rcx[2], _mul1[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rcx}, dst{_mul1}),
    UNIT(prev[2], r{rcx})
->
    MACHINE(ip[0], state{next}, rcx[.], _mul1[2]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rcx}, dst{_mul1}),
    UNIT(prev[2], r{_mul1})
@ 1
'swp(rcx, _mul1) | rcx != 0, _mul1 != 0'
    MACHINE(ip[0], state{run}, rcx[2], _mul1[3]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{_mul1}),
    UNIT(prev[2], r{rcx}),
    UNIT(prev[3], r{_mul1})
->
    MACHINE(ip[0], state{next}, rcx[3], _mul1[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{_mul1}),
    UNIT(prev[2], r{_mul1}),
    UNIT(prev[3], r{rcx})
@ 1
'swp(rcx, _mul1) | _mul1 == 0'
    MACHINE(ip[0], state{run}, rcx[2], _mul1[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{_mul1}),
    UNIT(prev[2], r{rcx})
->
    MACHINE(ip[0], state{next}, rcx[.], _mul1[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{_mul1}),
    UNIT(prev[2], r{_mul1})
@ 1
'swp(rcx, _mul1) | rcx == 0, _mul1 != 0'
    MACHINE(ip[0], state{run}, rcx[.], _mul1[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{_mul1}),
    UNIT(prev[2], r{_mul1})
->
    MACHINE(ip[0], state{next}, rcx[2], _mul1[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{_mul1}),
    UNIT(prev[2], r{rcx})
@ 1
'swp(rcx, _mul1) | rcx == _mul1 == 0'
    MACHINE(ip[0], state{run}, rcx[.], _mul1[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{_mul1})
->
    MACHINE(ip[0], state{next}, rcx[.], _mul1[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{_mul1})
@ 1
'relabel_units | rcx -> _mul2'
    UNIT(prev[_], next[0], r{rcx}),
    UNIT(prev[0], r{_mul2})
->
    UNIT(prev[_], next[0], r{rcx}),
    UNIT(prev[0], r{rcx})
@ inf
'add(rcx, _mul2) | rcx == 0'
    MACHINE(ip[0], state{run}, rcx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rcx})
->
    MACHINE(ip[0], state{next}, rcx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rcx})
@ 1
'add(rcx, _mul2) | _mul2 == 0'
    MACHINE(ip[0], state{run}, rcx[2], _mul2[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rcx}, dst{_mul2}),
    UNIT(prev[2], r{rcx})
->
    MACHINE(ip[0], state{next}, rcx[.], _mul2[2]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rcx}, dst{_mul2}),
    UNIT(prev[2], r{_mul2})
@ 1
'add(rcx, _mul2) | rcx != 0'
    MACHINE(ip[0], state{run}, rcx[2], _mul2[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rcx}, dst{_mul2}),
    UNIT(prev[2], r{rcx}),
    UNIT(next[.], r{_mul2})
->
    MACHINE(ip[0], state{next}, rcx[.], _mul2[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rcx}, dst{_mul2}),
    UNIT(prev[2], r{_mul2}),
    UNIT(next[2], r{_mul2})
@ 1
'mov(rcx, _mul2) | rcx == 0'
    MACHINE(ip[0], state{run}, rcx[.], _mul2[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rcx}, dst{_mul2})
->
    MACHINE(ip[0], state{next}, rcx[.], _mul2[.]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rcx}, dst{_mul2})
@ 1
'mov(rcx, _mul2) | rcx != 0, _mul2 == 0'
    MACHINE(ip[0], state{run}, rcx[2], _mul2[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rcx}, dst{_mul2}),
    UNIT(prev[2], r{rcx})
->
    MACHINE(ip[0], state{next}, rcx[.], _mul2[2]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rcx}, dst{_mul2}),
    UNIT(prev[2], r{_mul2})
@ 1
'swp(rcx, _mul2) | rcx != 0, _mul2 != 0'
    MACHINE(ip[0], state{run}, rcx[2], _mul2[3]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{_mul2}),
    UNIT(prev[2], r{rcx}),
    UNIT(prev[3], r{_mul2})
->
    MACHINE(ip[0], state{next}, rcx[3], _mul2[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{_mul2}),
    UNIT(prev[2], r{_mul2}),
    UNIT(prev[3], r{rcx})
@ 1
'swp(rcx, _mul2) | _mul2 == 0'
    MACHINE(ip[0], state{run}, rcx[2], _mul2[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{_mul2}),
    UNIT(prev[2], r{rcx})
->
    MACHINE(ip[0], state{next}, rcx[.], _mul2[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{_mul2}),
    UNIT(prev[2], r{_mul2})
@ 1
'swp(rcx, _mul2) | rcx == 0, _mul2 != 0'
    MACHINE(ip[0], state{run}, rcx[.], _mul2[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{_mul2}),
    UNIT(prev[2], r{_mul2})
->
    MACHINE(ip[0], state{next}, rcx[2], _mul2[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{_mul2}),
    UNIT(prev[2], r{rcx})
@ 1
'swp(rcx, _mul2) | rcx == _mul2 == 0'
    MACHINE(ip[0], state{run}, rcx[.], _mul2[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{_mul2})
->
    MACHINE(ip[0], state{next}, rcx[.], _mul2[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rcx}, dst{_mul2})
@ 1
'relabel_units | _cpy -> rbx'
    UNIT(prev[_], next[0], r{_cpy}),
    UNIT(prev[0], r{rbx})
->
    UNIT(prev[_], next[0], r{_cpy}),
    UNIT(prev[0], r{_cpy})
@ inf
'add(_cpy, rbx) | _cpy == 0'
    MACHINE(ip[0], state{run}, _cpy[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_cpy})
->
    MACHINE(ip[0], state{next}, _cpy[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_cpy})
@ 1
'add(_cpy, rbx) | rbx == 0'
    MACHINE(ip[0], state{run}, _cpy[2], rbx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_cpy}, dst{rbx}),
    UNIT(prev[2], r{_cpy})
->
    MACHINE(ip[0], state{next}, _cpy[.], rbx[2]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_cpy}, dst{rbx}),
    UNIT(prev[2], r{rbx})
@ 1
'add(_cpy, rbx) | _cpy != 0'
    MACHINE(ip[0], state{run}, _cpy[2], rbx[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_cpy}, dst{rbx}),
    UNIT(prev[2], r{_cpy}),
    UNIT(next[.], r{rbx})
->
    MACHINE(ip[0], state{next}, _cpy[.], rbx[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_cpy}, dst{rbx}),
    UNIT(prev[2], r{rbx}),
    UNIT(next[2], r{rbx})
@ 1
'mov(_cpy, rbx) | _cpy == 0'
    MACHINE(ip[0], state{run}, _cpy[.], rbx[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_cpy}, dst{rbx})
->
    MACHINE(ip[0], state{next}, _cpy[.], rbx[.]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_cpy}, dst{rbx})
@ 1
'mov(_cpy, rbx) | _cpy != 0, rbx == 0'
    MACHINE(ip[0], state{run}, _cpy[2], rbx[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_cpy}, dst{rbx}),
    UNIT(prev[2], r{_cpy})
->
    MACHINE(ip[0], state{next}, _cpy[.], rbx[2]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_cpy}, dst{rbx}),
    UNIT(prev[2], r{rbx})
@ 1
'swp(_cpy, rbx) | _cpy != 0, rbx != 0'
    MACHINE(ip[0], state{run}, _cpy[2], rbx[3]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{rbx}),
    UNIT(prev[2], r{_cpy}),
    UNIT(prev[3], r{rbx})
->
    MACHINE(ip[0], state{next}, _cpy[3], rbx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{rbx}),
    UNIT(prev[2], r{rbx}),
    UNIT(prev[3], r{_cpy})
@ 1
'swp(_cpy, rbx) | rbx == 0'
    MACHINE(ip[0], state{run}, _cpy[2], rbx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{rbx}),
    UNIT(prev[2], r{_cpy})
->
    MACHINE(ip[0], state{next}, _cpy[.], rbx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{rbx}),
    UNIT(prev[2], r{rbx})
@ 1
'swp(_cpy, rbx) | _cpy == 0, rbx != 0'
    MACHINE(ip[0], state{run}, _cpy[.], rbx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{rbx}),
    UNIT(prev[2], r{rbx})
->
    MACHINE(ip[0], state{next}, _cpy[2], rbx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{rbx}),
    UNIT(prev[2], r{_cpy})
@ 1
'swp(_cpy, rbx) | _cpy == rbx == 0'
    MACHINE(ip[0], state{run}, _cpy[.], rbx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{rbx})
->
    MACHINE(ip[0], state{next}, _cpy[.], rbx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{rbx})
@ 1
'relabel_units | _cpy -> rax'
    UNIT(prev[_], next[0], r{_cpy}),
    UNIT(prev[0], r{rax})
->
    UNIT(prev[_], next[0], r{_cpy}),
    UNIT(prev[0], r{_cpy})
@ inf
'add(_cpy, rax) | _cpy == 0'
    MACHINE(ip[0], state{run}, _cpy[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_cpy})
->
    MACHINE(ip[0], state{next}, _cpy[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_cpy})
@ 1
'add(_cpy, rax) | rax == 0'
    MACHINE(ip[0], state{run}, _cpy[2], rax[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_cpy}, dst{rax}),
    UNIT(prev[2], r{_cpy})
->
    MACHINE(ip[0], state{next}, _cpy[.], rax[2]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_cpy}, dst{rax}),
    UNIT(prev[2], r{rax})
@ 1
'add(_cpy, rax) | _cpy != 0'
    MACHINE(ip[0], state{run}, _cpy[2], rax[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_cpy}, dst{rax}),
    UNIT(prev[2], r{_cpy}),
    UNIT(next[.], r{rax})
->
    MACHINE(ip[0], state{next}, _cpy[.], rax[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_cpy}, dst{rax}),
    UNIT(prev[2], r{rax}),
    UNIT(next[2], r{rax})
@ 1
'mov(_cpy, rax) | _cpy == 0'
    MACHINE(ip[0], state{run}, _cpy[.], rax[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_cpy}, dst{rax})
->
    MACHINE(ip[0], state{next}, _cpy[.], rax[.]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_cpy}, dst{rax})
@ 1
'mov(_cpy, rax) | _cpy != 0, rax == 0'
    MACHINE(ip[0], state{run}, _cpy[2], rax[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_cpy}, dst{rax}),
    UNIT(prev[2], r{_cpy})
->
    MACHINE(ip[0], state{next}, _cpy[.], rax[2]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_cpy}, dst{rax}),
    UNIT(prev[2], r{rax})
@ 1
'swp(_cpy, rax) | _cpy != 0, rax != 0'
    MACHINE(ip[0], state{run}, _cpy[2], rax[3]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{rax}),
    UNIT(prev[2], r{_cpy}),
    UNIT(prev[3], r{rax})
->
    MACHINE(ip[0], state{next}, _cpy[3], rax[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{rax}),
    UNIT(prev[2], r{rax}),
    UNIT(prev[3], r{_cpy})
@ 1
'swp(_cpy, rax) | rax == 0'
    MACHINE(ip[0], state{run}, _cpy[2], rax[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{rax}),
    UNIT(prev[2], r{_cpy})
->
    MACHINE(ip[0], state{next}, _cpy[.], rax[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{rax}),
    UNIT(prev[2], r{rax})
@ 1
'swp(_cpy, rax) | _cpy == 0, rax != 0'
    MACHINE(ip[0], state{run}, _cpy[.], rax[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{rax}),
    UNIT(prev[2], r{rax})
->
    MACHINE(ip[0], state{next}, _cpy[2], rax[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{rax}),
    UNIT(prev[2], r{_cpy})
@ 1
'swp(_cpy, rax) | _cpy == rax == 0'
    MACHINE(ip[0], state{run}, _cpy[.], rax[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{rax})
->
    MACHINE(ip[0], state{next}, _cpy[.], rax[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{rax})
@ 1
'relabel_units | _cpy -> rcx'
    UNIT(prev[_], next[0], r{_cpy}),
    UNIT(prev[0], r{rcx})
->
    UNIT(prev[_], next[0], r{_cpy}),
    UNIT(prev[0], r{_cpy})
@ inf
'add(_cpy, rcx) | _cpy == 0'
    MACHINE(ip[0], state{run}, _cpy[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_cpy})
->
    MACHINE(ip[0], state{next}, _cpy[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_cpy})
@ 1
'add(_cpy, rcx) | rcx == 0'
    MACHINE(ip[0], state{run}, _cpy[2], rcx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_cpy}, dst{rcx}),
    UNIT(prev[2], r{_cpy})
->
    MACHINE(ip[0], state{next}, _cpy[.], rcx[2]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_cpy}, dst{rcx}),
    UNIT(prev[2], r{rcx})
@ 1
'add(_cpy, rcx) | _cpy != 0'
    MACHINE(ip[0], state{run}, _cpy[2], rcx[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_cpy}, dst{rcx}),
    UNIT(prev[2], r{_cpy}),
    UNIT(next[.], r{rcx})
->
    MACHINE(ip[0], state{next}, _cpy[.], rcx[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_cpy}, dst{rcx}),
    UNIT(prev[2], r{rcx}),
    UNIT(next[2], r{rcx})
@ 1
'mov(_cpy, rcx) | _cpy == 0'
    MACHINE(ip[0], state{run}, _cpy[.], rcx[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_cpy}, dst{rcx})
->
    MACHINE(ip[0], state{next}, _cpy[.], rcx[.]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_cpy}, dst{rcx})
@ 1
'mov(_cpy, rcx) | _cpy != 0, rcx == 0'
    MACHINE(ip[0], state{run}, _cpy[2], rcx[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_cpy}, dst{rcx}),
    UNIT(prev[2], r{_cpy})
->
    MACHINE(ip[0], state{next}, _cpy[.], rcx[2]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_cpy}, dst{rcx}),
    UNIT(prev[2], r{rcx})
@ 1
'swp(_cpy, rcx) | _cpy != 0, rcx != 0'
    MACHINE(ip[0], state{run}, _cpy[2], rcx[3]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{rcx}),
    UNIT(prev[2], r{_cpy}),
    UNIT(prev[3], r{rcx})
->
    MACHINE(ip[0], state{next}, _cpy[3], rcx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{rcx}),
    UNIT(prev[2], r{rcx}),
    UNIT(prev[3], r{_cpy})
@ 1
'swp(_cpy, rcx) | rcx == 0'
    MACHINE(ip[0], state{run}, _cpy[2], rcx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{rcx}),
    UNIT(prev[2], r{_cpy})
->
    MACHINE(ip[0], state{next}, _cpy[.], rcx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{rcx}),
    UNIT(prev[2], r{rcx})
@ 1
'swp(_cpy, rcx) | _cpy == 0, rcx != 0'
    MACHINE(ip[0], state{run}, _cpy[.], rcx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{rcx}),
    UNIT(prev[2], r{rcx})
->
    MACHINE(ip[0], state{next}, _cpy[2], rcx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{rcx}),
    UNIT(prev[2], r{_cpy})
@ 1
'swp(_cpy, rcx) | _cpy == rcx == 0'
    MACHINE(ip[0], state{run}, _cpy[.], rcx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{rcx})
->
    MACHINE(ip[0], state{next}, _cpy[.], rcx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{rcx})
@ 1
'relabel_units | _cpy -> rdx'
    UNIT(prev[_], next[0], r{_cpy}),
    UNIT(prev[0], r{rdx})
->
    UNIT(prev[_], next[0], r{_cpy}),
    UNIT(prev[0], r{_cpy})
@ inf
'add(_cpy, rdx) | _cpy == 0'
    MACHINE(ip[0], state{run}, _cpy[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_cpy})
->
    MACHINE(ip[0], state{next}, _cpy[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_cpy})
@ 1
'add(_cpy, rdx) | rdx == 0'
    MACHINE(ip[0], state{run}, _cpy[2], rdx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_cpy}, dst{rdx}),
    UNIT(prev[2], r{_cpy})
->
    MACHINE(ip[0], state{next}, _cpy[.], rdx[2]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_cpy}, dst{rdx}),
    UNIT(prev[2], r{rdx})
@ 1
'add(_cpy, rdx) | _cpy != 0'
    MACHINE(ip[0], state{run}, _cpy[2], rdx[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_cpy}, dst{rdx}),
    UNIT(prev[2], r{_cpy}),
    UNIT(next[.], r{rdx})
->
    MACHINE(ip[0], state{next}, _cpy[.], rdx[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_cpy}, dst{rdx}),
    UNIT(prev[2], r{rdx}),
    UNIT(next[2], r{rdx})
@ 1
'mov(_cpy, rdx) | _cpy == 0'
    MACHINE(ip[0], state{run}, _cpy[.], rdx[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_cpy}, dst{rdx})
->
    MACHINE(ip[0], state{next}, _cpy[.], rdx[.]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_cpy}, dst{rdx})
@ 1
'mov(_cpy, rdx) | _cpy != 0, rdx == 0'
    MACHINE(ip[0], state{run}, _cpy[2], rdx[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_cpy}, dst{rdx}),
    UNIT(prev[2], r{_cpy})
->
    MACHINE(ip[0], state{next}, _cpy[.], rdx[2]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_cpy}, dst{rdx}),
    UNIT(prev[2], r{rdx})
@ 1
'swp(_cpy, rdx) | _cpy != 0, rdx != 0'
    MACHINE(ip[0], state{run}, _cpy[2], rdx[3]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{rdx}),
    UNIT(prev[2], r{_cpy}),
    UNIT(prev[3], r{rdx})
->
    MACHINE(ip[0], state{next}, _cpy[3], rdx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{rdx}),
    UNIT(prev[2], r{rdx}),
    UNIT(prev[3], r{_cpy})
@ 1
'swp(_cpy, rdx) | rdx == 0'
    MACHINE(ip[0], state{run}, _cpy[2], rdx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{rdx}),
    UNIT(prev[2], r{_cpy})
->
    MACHINE(ip[0], state{next}, _cpy[.], rdx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{rdx}),
    UNIT(prev[2], r{rdx})
@ 1
'swp(_cpy, rdx) | _cpy == 0, rdx != 0'
    MACHINE(ip[0], state{run}, _cpy[.], rdx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{rdx}),
    UNIT(prev[2], r{rdx})
->
    MACHINE(ip[0], state{next}, _cpy[2], rdx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{rdx}),
    UNIT(prev[2], r{_cpy})
@ 1
'swp(_cpy, rdx) | _cpy == rdx == 0'
    MACHINE(ip[0], state{run}, _cpy[.], rdx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{rdx})
->
    MACHINE(ip[0], state{next}, _cpy[.], rdx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{rdx})
@ 1
'relabel_units | _cpy -> _mul1'
    UNIT(prev[_], next[0], r{_cpy}),
    UNIT(prev[0], r{_mul1})
->
    UNIT(prev[_], next[0], r{_cpy}),
    UNIT(prev[0], r{_cpy})
@ inf
'add(_cpy, _mul1) | _cpy == 0'
    MACHINE(ip[0], state{run}, _cpy[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_cpy})
->
    MACHINE(ip[0], state{next}, _cpy[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_cpy})
@ 1
'add(_cpy, _mul1) | _mul1 == 0'
    MACHINE(ip[0], state{run}, _cpy[2], _mul1[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_cpy}, dst{_mul1}),
    UNIT(prev[2], r{_cpy})
->
    MACHINE(ip[0], state{next}, _cpy[.], _mul1[2]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_cpy}, dst{_mul1}),
    UNIT(prev[2], r{_mul1})
@ 1
'add(_cpy, _mul1) | _cpy != 0'
    MACHINE(ip[0], state{run}, _cpy[2], _mul1[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_cpy}, dst{_mul1}),
    UNIT(prev[2], r{_cpy}),
    UNIT(next[.], r{_mul1})
->
    MACHINE(ip[0], state{next}, _cpy[.], _mul1[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_cpy}, dst{_mul1}),
    UNIT(prev[2], r{_mul1}),
    UNIT(next[2], r{_mul1})
@ 1
'mov(_cpy, _mul1) | _cpy == 0'
    MACHINE(ip[0], state{run}, _cpy[.], _mul1[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_cpy}, dst{_mul1})
->
    MACHINE(ip[0], state{next}, _cpy[.], _mul1[.]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_cpy}, dst{_mul1})
@ 1
'mov(_cpy, _mul1) | _cpy != 0, _mul1 == 0'
    MACHINE(ip[0], state{run}, _cpy[2], _mul1[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_cpy}, dst{_mul1}),
    UNIT(prev[2], r{_cpy})
->
    MACHINE(ip[0], state{next}, _cpy[.], _mul1[2]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_cpy}, dst{_mul1}),
    UNIT(prev[2], r{_mul1})
@ 1
'swp(_cpy, _mul1) | _cpy != 0, _mul1 != 0'
    MACHINE(ip[0], state{run}, _cpy[2], _mul1[3]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{_mul1}),
    UNIT(prev[2], r{_cpy}),
    UNIT(prev[3], r{_mul1})
->
    MACHINE(ip[0], state{next}, _cpy[3], _mul1[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{_mul1}),
    UNIT(prev[2], r{_mul1}),
    UNIT(prev[3], r{_cpy})
@ 1
'swp(_cpy, _mul1) | _mul1 == 0'
    MACHINE(ip[0], state{run}, _cpy[2], _mul1[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{_mul1}),
    UNIT(prev[2], r{_cpy})
->
    MACHINE(ip[0], state{next}, _cpy[.], _mul1[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{_mul1}),
    UNIT(prev[2], r{_mul1})
@ 1
'swp(_cpy, _mul1) | _cpy == 0, _mul1 != 0'
    MACHINE(ip[0], state{run}, _cpy[.], _mul1[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{_mul1}),
    UNIT(prev[2], r{_mul1})
->
    MACHINE(ip[0], state{next}, _cpy[2], _mul1[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{_mul1}),
    UNIT(prev[2], r{_cpy})
@ 1
'swp(_cpy, _mul1) | _cpy == _mul1 == 0'
    MACHINE(ip[0], state{run}, _cpy[.], _mul1[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{_mul1})
->
    MACHINE(ip[0], state{next}, _cpy[.], _mul1[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{_mul1})
@ 1
'relabel_units | _cpy -> _mul2'
    UNIT(prev[_], next[0], r{_cpy}),
    UNIT(prev[0], r{_mul2})
->
    UNIT(prev[_], next[0], r{_cpy}),
    UNIT(prev[0], r{_cpy})
@ inf
'add(_cpy, _mul2) | _cpy == 0'
    MACHINE(ip[0], state{run}, _cpy[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_cpy})
->
    MACHINE(ip[0], state{next}, _cpy[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_cpy})
@ 1
'add(_cpy, _mul2) | _mul2 == 0'
    MACHINE(ip[0], state{run}, _cpy[2], _mul2[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_cpy}, dst{_mul2}),
    UNIT(prev[2], r{_cpy})
->
    MACHINE(ip[0], state{next}, _cpy[.], _mul2[2]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_cpy}, dst{_mul2}),
    UNIT(prev[2], r{_mul2})
@ 1
'add(_cpy, _mul2) | _cpy != 0'
    MACHINE(ip[0], state{run}, _cpy[2], _mul2[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_cpy}, dst{_mul2}),
    UNIT(prev[2], r{_cpy}),
    UNIT(next[.], r{_mul2})
->
    MACHINE(ip[0], state{next}, _cpy[.], _mul2[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_cpy}, dst{_mul2}),
    UNIT(prev[2], r{_mul2}),
    UNIT(next[2], r{_mul2})
@ 1
'mov(_cpy, _mul2) | _cpy == 0'
    MACHINE(ip[0], state{run}, _cpy[.], _mul2[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_cpy}, dst{_mul2})
->
    MACHINE(ip[0], state{next}, _cpy[.], _mul2[.]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_cpy}, dst{_mul2})
@ 1
'mov(_cpy, _mul2) | _cpy != 0, _mul2 == 0'
    MACHINE(ip[0], state{run}, _cpy[2], _mul2[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_cpy}, dst{_mul2}),
    UNIT(prev[2], r{_cpy})
->
    MACHINE(ip[0], state{next}, _cpy[.], _mul2[2]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_cpy}, dst{_mul2}),
    UNIT(prev[2], r{_mul2})
@ 1
'swp(_cpy, _mul2) | _cpy != 0, _mul2 != 0'
    MACHINE(ip[0], state{run}, _cpy[2], _mul2[3]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{_mul2}),
    UNIT(prev[2], r{_cpy}),
    UNIT(prev[3], r{_mul2})
->
    MACHINE(ip[0], state{next}, _cpy[3], _mul2[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{_mul2}),
    UNIT(prev[2], r{_mul2}),
    UNIT(prev[3], r{_cpy})
@ 1
'swp(_cpy, _mul2) | _mul2 == 0'
    MACHINE(ip[0], state{run}, _cpy[2], _mul2[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{_mul2}),
    UNIT(prev[2], r{_cpy})
->
    MACHINE(ip[0], state{next}, _cpy[.], _mul2[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{_mul2}),
    UNIT(prev[2], r{_mul2})
@ 1
'swp(_cpy, _mul2) | _cpy == 0, _mul2 != 0'
    MACHINE(ip[0], state{run}, _cpy[.], _mul2[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{_mul2}),
    UNIT(prev[2], r{_mul2})
->
    MACHINE(ip[0], state{next}, _cpy[2], _mul2[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{_mul2}),
    UNIT(prev[2], r{_cpy})
@ 1
'swp(_cpy, _mul2) | _cpy == _mul2 == 0'
    MACHINE(ip[0], state{run}, _cpy[.], _mul2[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{_mul2})
->
    MACHINE(ip[0], state{next}, _cpy[.], _mul2[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_cpy}, dst{_mul2})
@ 1
'relabel_units | rdx -> rbx'
    UNIT(prev[_], next[0], r{rdx}),
    UNIT(prev[0], r{rbx})
->
    UNIT(prev[_], next[0], r{rdx}),
    UNIT(prev[0], r{rdx})
@ inf
'add(rdx, rbx) | rdx == 0'
    MACHINE(ip[0], state{run}, rdx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rdx})
->
    MACHINE(ip[0], state{next}, rdx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rdx})
@ 1
'add(rdx, rbx) | rbx == 0'
    MACHINE(ip[0], state{run}, rdx[2], rbx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rdx}, dst{rbx}),
    UNIT(prev[2], r{rdx})
->
    MACHINE(ip[0], state{next}, rdx[.], rbx[2]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rdx}, dst{rbx}),
    UNIT(prev[2], r{rbx})
@ 1
'add(rdx, rbx) | rdx != 0'
    MACHINE(ip[0], state{run}, rdx[2], rbx[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rdx}, dst{rbx}),
    UNIT(prev[2], r{rdx}),
    UNIT(next[.], r{rbx})
->
    MACHINE(ip[0], state{next}, rdx[.], rbx[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rdx}, dst{rbx}),
    UNIT(prev[2], r{rbx}),
    UNIT(next[2], r{rbx})
@ 1
'mov(rdx, rbx) | rdx == 0'
    MACHINE(ip[0], state{run}, rdx[.], rbx[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rdx}, dst{rbx})
->
    MACHINE(ip[0], state{next}, rdx[.], rbx[.]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rdx}, dst{rbx})
@ 1
'mov(rdx, rbx) | rdx != 0, rbx == 0'
    MACHINE(ip[0], state{run}, rdx[2], rbx[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rdx}, dst{rbx}),
    UNIT(prev[2], r{rdx})
->
    MACHINE(ip[0], state{next}, rdx[.], rbx[2]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rdx}, dst{rbx}),
    UNIT(prev[2], r{rbx})
@ 1
'swp(rdx, rbx) | rdx != 0, rbx != 0'
    MACHINE(ip[0], state{run}, rdx[2], rbx[3]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{rbx}),
    UNIT(prev[2], r{rdx}),
    UNIT(prev[3], r{rbx})
->
    MACHINE(ip[0], state{next}, rdx[3], rbx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{rbx}),
    UNIT(prev[2], r{rbx}),
    UNIT(prev[3], r{rdx})
@ 1
'swp(rdx, rbx) | rbx == 0'
    MACHINE(ip[0], state{run}, rdx[2], rbx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{rbx}),
    UNIT(prev[2], r{rdx})
->
    MACHINE(ip[0], state{next}, rdx[.], rbx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{rbx}),
    UNIT(prev[2], r{rbx})
@ 1
'swp(rdx, rbx) | rdx == 0, rbx != 0'
    MACHINE(ip[0], state{run}, rdx[.], rbx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{rbx}),
    UNIT(prev[2], r{rbx})
->
    MACHINE(ip[0], state{next}, rdx[2], rbx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{rbx}),
    UNIT(prev[2], r{rdx})
@ 1
'swp(rdx, rbx) | rdx == rbx == 0'
    MACHINE(ip[0], state{run}, rdx[.], rbx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{rbx})
->
    MACHINE(ip[0], state{next}, rdx[.], rbx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{rbx})
@ 1
'relabel_units | rdx -> rax'
    UNIT(prev[_], next[0], r{rdx}),
    UNIT(prev[0], r{rax})
->
    UNIT(prev[_], next[0], r{rdx}),
    UNIT(prev[0], r{rdx})
@ inf
'add(rdx, rax) | rdx == 0'
    MACHINE(ip[0], state{run}, rdx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rdx})
->
    MACHINE(ip[0], state{next}, rdx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rdx})
@ 1
'add(rdx, rax) | rax == 0'
    MACHINE(ip[0], state{run}, rdx[2], rax[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rdx}, dst{rax}),
    UNIT(prev[2], r{rdx})
->
    MACHINE(ip[0], state{next}, rdx[.], rax[2]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rdx}, dst{rax}),
    UNIT(prev[2], r{rax})
@ 1
'add(rdx, rax) | rdx != 0'
    MACHINE(ip[0], state{run}, rdx[2], rax[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rdx}, dst{rax}),
    UNIT(prev[2], r{rdx}),
    UNIT(next[.], r{rax})
->
    MACHINE(ip[0], state{next}, rdx[.], rax[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rdx}, dst{rax}),
    UNIT(prev[2], r{rax}),
    UNIT(next[2], r{rax})
@ 1
'mov(rdx, rax) | rdx == 0'
    MACHINE(ip[0], state{run}, rdx[.], rax[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rdx}, dst{rax})
->
    MACHINE(ip[0], state{next}, rdx[.], rax[.]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rdx}, dst{rax})
@ 1
'mov(rdx, rax) | rdx != 0, rax == 0'
    MACHINE(ip[0], state{run}, rdx[2], rax[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rdx}, dst{rax}),
    UNIT(prev[2], r{rdx})
->
    MACHINE(ip[0], state{next}, rdx[.], rax[2]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rdx}, dst{rax}),
    UNIT(prev[2], r{rax})
@ 1
'swp(rdx, rax) | rdx != 0, rax != 0'
    MACHINE(ip[0], state{run}, rdx[2], rax[3]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{rax}),
    UNIT(prev[2], r{rdx}),
    UNIT(prev[3], r{rax})
->
    MACHINE(ip[0], state{next}, rdx[3], rax[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{rax}),
    UNIT(prev[2], r{rax}),
    UNIT(prev[3], r{rdx})
@ 1
'swp(rdx, rax) | rax == 0'
    MACHINE(ip[0], state{run}, rdx[2], rax[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{rax}),
    UNIT(prev[2], r{rdx})
->
    MACHINE(ip[0], state{next}, rdx[.], rax[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{rax}),
    UNIT(prev[2], r{rax})
@ 1
'swp(rdx, rax) | rdx == 0, rax != 0'
    MACHINE(ip[0], state{run}, rdx[.], rax[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{rax}),
    UNIT(prev[2], r{rax})
->
    MACHINE(ip[0], state{next}, rdx[2], rax[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{rax}),
    UNIT(prev[2], r{rdx})
@ 1
'swp(rdx, rax) | rdx == rax == 0'
    MACHINE(ip[0], state{run}, rdx[.], rax[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{rax})
->
    MACHINE(ip[0], state{next}, rdx[.], rax[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{rax})
@ 1
'relabel_units | rdx -> rcx'
    UNIT(prev[_], next[0], r{rdx}),
    UNIT(prev[0], r{rcx})
->
    UNIT(prev[_], next[0], r{rdx}),
    UNIT(prev[0], r{rdx})
@ inf
'add(rdx, rcx) | rdx == 0'
    MACHINE(ip[0], state{run}, rdx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rdx})
->
    MACHINE(ip[0], state{next}, rdx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rdx})
@ 1
'add(rdx, rcx) | rcx == 0'
    MACHINE(ip[0], state{run}, rdx[2], rcx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rdx}, dst{rcx}),
    UNIT(prev[2], r{rdx})
->
    MACHINE(ip[0], state{next}, rdx[.], rcx[2]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rdx}, dst{rcx}),
    UNIT(prev[2], r{rcx})
@ 1
'add(rdx, rcx) | rdx != 0'
    MACHINE(ip[0], state{run}, rdx[2], rcx[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rdx}, dst{rcx}),
    UNIT(prev[2], r{rdx}),
    UNIT(next[.], r{rcx})
->
    MACHINE(ip[0], state{next}, rdx[.], rcx[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rdx}, dst{rcx}),
    UNIT(prev[2], r{rcx}),
    UNIT(next[2], r{rcx})
@ 1
'mov(rdx, rcx) | rdx == 0'
    MACHINE(ip[0], state{run}, rdx[.], rcx[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rdx}, dst{rcx})
->
    MACHINE(ip[0], state{next}, rdx[.], rcx[.]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rdx}, dst{rcx})
@ 1
'mov(rdx, rcx) | rdx != 0, rcx == 0'
    MACHINE(ip[0], state{run}, rdx[2], rcx[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rdx}, dst{rcx}),
    UNIT(prev[2], r{rdx})
->
    MACHINE(ip[0], state{next}, rdx[.], rcx[2]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rdx}, dst{rcx}),
    UNIT(prev[2], r{rcx})
@ 1
'swp(rdx, rcx) | rdx != 0, rcx != 0'
    MACHINE(ip[0], state{run}, rdx[2], rcx[3]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{rcx}),
    UNIT(prev[2], r{rdx}),
    UNIT(prev[3], r{rcx})
->
    MACHINE(ip[0], state{next}, rdx[3], rcx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{rcx}),
    UNIT(prev[2], r{rcx}),
    UNIT(prev[3], r{rdx})
@ 1
'swp(rdx, rcx) | rcx == 0'
    MACHINE(ip[0], state{run}, rdx[2], rcx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{rcx}),
    UNIT(prev[2], r{rdx})
->
    MACHINE(ip[0], state{next}, rdx[.], rcx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{rcx}),
    UNIT(prev[2], r{rcx})
@ 1
'swp(rdx, rcx) | rdx == 0, rcx != 0'
    MACHINE(ip[0], state{run}, rdx[.], rcx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{rcx}),
    UNIT(prev[2], r{rcx})
->
    MACHINE(ip[0], state{next}, rdx[2], rcx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{rcx}),
    UNIT(prev[2], r{rdx})
@ 1
'swp(rdx, rcx) | rdx == rcx == 0'
    MACHINE(ip[0], state{run}, rdx[.], rcx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{rcx})
->
    MACHINE(ip[0], state{next}, rdx[.], rcx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{rcx})
@ 1
'relabel_units | rdx -> _cpy'
    UNIT(prev[_], next[0], r{rdx}),
    UNIT(prev[0], r{_cpy})
->
    UNIT(prev[_], next[0], r{rdx}),
    UNIT(prev[0], r{rdx})
@ inf
'add(rdx, _cpy) | rdx == 0'
    MACHINE(ip[0], state{run}, rdx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rdx})
->
    MACHINE(ip[0], state{next}, rdx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rdx})
@ 1
'add(rdx, _cpy) | _cpy == 0'
    MACHINE(ip[0], state{run}, rdx[2], _cpy[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rdx}, dst{_cpy}),
    UNIT(prev[2], r{rdx})
->
    MACHINE(ip[0], state{next}, rdx[.], _cpy[2]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rdx}, dst{_cpy}),
    UNIT(prev[2], r{_cpy})
@ 1
'add(rdx, _cpy) | rdx != 0'
    MACHINE(ip[0], state{run}, rdx[2], _cpy[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rdx}, dst{_cpy}),
    UNIT(prev[2], r{rdx}),
    UNIT(next[.], r{_cpy})
->
    MACHINE(ip[0], state{next}, rdx[.], _cpy[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rdx}, dst{_cpy}),
    UNIT(prev[2], r{_cpy}),
    UNIT(next[2], r{_cpy})
@ 1
'mov(rdx, _cpy) | rdx == 0'
    MACHINE(ip[0], state{run}, rdx[.], _cpy[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rdx}, dst{_cpy})
->
    MACHINE(ip[0], state{next}, rdx[.], _cpy[.]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rdx}, dst{_cpy})
@ 1
'mov(rdx, _cpy) | rdx != 0, _cpy == 0'
    MACHINE(ip[0], state{run}, rdx[2], _cpy[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rdx}, dst{_cpy}),
    UNIT(prev[2], r{rdx})
->
    MACHINE(ip[0], state{next}, rdx[.], _cpy[2]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rdx}, dst{_cpy}),
    UNIT(prev[2], r{_cpy})
@ 1
'swp(rdx, _cpy) | rdx != 0, _cpy != 0'
    MACHINE(ip[0], state{run}, rdx[2], _cpy[3]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{_cpy}),
    UNIT(prev[2], r{rdx}),
    UNIT(prev[3], r{_cpy})
->
    MACHINE(ip[0], state{next}, rdx[3], _cpy[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{_cpy}),
    UNIT(prev[2], r{_cpy}),
    UNIT(prev[3], r{rdx})
@ 1
'swp(rdx, _cpy) | _cpy == 0'
    MACHINE(ip[0], state{run}, rdx[2], _cpy[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{_cpy}),
    UNIT(prev[2], r{rdx})
->
    MACHINE(ip[0], state{next}, rdx[.], _cpy[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{_cpy}),
    UNIT(prev[2], r{_cpy})
@ 1
'swp(rdx, _cpy) | rdx == 0, _cpy != 0'
    MACHINE(ip[0], state{run}, rdx[.], _cpy[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{_cpy}),
    UNIT(prev[2], r{_cpy})
->
    MACHINE(ip[0], state{next}, rdx[2], _cpy[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{_cpy}),
    UNIT(prev[2], r{rdx})
@ 1
'swp(rdx, _cpy) | rdx == _cpy == 0'
    MACHINE(ip[0], state{run}, rdx[.], _cpy[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{_cpy})
->
    MACHINE(ip[0], state{next}, rdx[.], _cpy[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{_cpy})
@ 1
'relabel_units | rdx -> _mul1'
    UNIT(prev[_], next[0], r{rdx}),
    UNIT(prev[0], r{_mul1})
->
    UNIT(prev[_], next[0], r{rdx}),
    UNIT(prev[0], r{rdx})
@ inf
'add(rdx, _mul1) | rdx == 0'
    MACHINE(ip[0], state{run}, rdx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rdx})
->
    MACHINE(ip[0], state{next}, rdx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rdx})
@ 1
'add(rdx, _mul1) | _mul1 == 0'
    MACHINE(ip[0], state{run}, rdx[2], _mul1[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rdx}, dst{_mul1}),
    UNIT(prev[2], r{rdx})
->
    MACHINE(ip[0], state{next}, rdx[.], _mul1[2]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rdx}, dst{_mul1}),
    UNIT(prev[2], r{_mul1})
@ 1
'add(rdx, _mul1) | rdx != 0'
    MACHINE(ip[0], state{run}, rdx[2], _mul1[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rdx}, dst{_mul1}),
    UNIT(prev[2], r{rdx}),
    UNIT(next[.], r{_mul1})
->
    MACHINE(ip[0], state{next}, rdx[.], _mul1[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rdx}, dst{_mul1}),
    UNIT(prev[2], r{_mul1}),
    UNIT(next[2], r{_mul1})
@ 1
'mov(rdx, _mul1) | rdx == 0'
    MACHINE(ip[0], state{run}, rdx[.], _mul1[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rdx}, dst{_mul1})
->
    MACHINE(ip[0], state{next}, rdx[.], _mul1[.]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rdx}, dst{_mul1})
@ 1
'mov(rdx, _mul1) | rdx != 0, _mul1 == 0'
    MACHINE(ip[0], state{run}, rdx[2], _mul1[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rdx}, dst{_mul1}),
    UNIT(prev[2], r{rdx})
->
    MACHINE(ip[0], state{next}, rdx[.], _mul1[2]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rdx}, dst{_mul1}),
    UNIT(prev[2], r{_mul1})
@ 1
'swp(rdx, _mul1) | rdx != 0, _mul1 != 0'
    MACHINE(ip[0], state{run}, rdx[2], _mul1[3]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{_mul1}),
    UNIT(prev[2], r{rdx}),
    UNIT(prev[3], r{_mul1})
->
    MACHINE(ip[0], state{next}, rdx[3], _mul1[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{_mul1}),
    UNIT(prev[2], r{_mul1}),
    UNIT(prev[3], r{rdx})
@ 1
'swp(rdx, _mul1) | _mul1 == 0'
    MACHINE(ip[0], state{run}, rdx[2], _mul1[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{_mul1}),
    UNIT(prev[2], r{rdx})
->
    MACHINE(ip[0], state{next}, rdx[.], _mul1[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{_mul1}),
    UNIT(prev[2], r{_mul1})
@ 1
'swp(rdx, _mul1) | rdx == 0, _mul1 != 0'
    MACHINE(ip[0], state{run}, rdx[.], _mul1[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{_mul1}),
    UNIT(prev[2], r{_mul1})
->
    MACHINE(ip[0], state{next}, rdx[2], _mul1[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{_mul1}),
    UNIT(prev[2], r{rdx})
@ 1
'swp(rdx, _mul1) | rdx == _mul1 == 0'
    MACHINE(ip[0], state{run}, rdx[.], _mul1[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{_mul1})
->
    MACHINE(ip[0], state{next}, rdx[.], _mul1[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{_mul1})
@ 1
'relabel_units | rdx -> _mul2'
    UNIT(prev[_], next[0], r{rdx}),
    UNIT(prev[0], r{_mul2})
->
    UNIT(prev[_], next[0], r{rdx}),
    UNIT(prev[0], r{rdx})
@ inf
'add(rdx, _mul2) | rdx == 0'
    MACHINE(ip[0], state{run}, rdx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rdx})
->
    MACHINE(ip[0], state{next}, rdx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rdx})
@ 1
'add(rdx, _mul2) | _mul2 == 0'
    MACHINE(ip[0], state{run}, rdx[2], _mul2[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rdx}, dst{_mul2}),
    UNIT(prev[2], r{rdx})
->
    MACHINE(ip[0], state{next}, rdx[.], _mul2[2]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rdx}, dst{_mul2}),
    UNIT(prev[2], r{_mul2})
@ 1
'add(rdx, _mul2) | rdx != 0'
    MACHINE(ip[0], state{run}, rdx[2], _mul2[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rdx}, dst{_mul2}),
    UNIT(prev[2], r{rdx}),
    UNIT(next[.], r{_mul2})
->
    MACHINE(ip[0], state{next}, rdx[.], _mul2[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{rdx}, dst{_mul2}),
    UNIT(prev[2], r{_mul2}),
    UNIT(next[2], r{_mul2})
@ 1
'mov(rdx, _mul2) | rdx == 0'
    MACHINE(ip[0], state{run}, rdx[.], _mul2[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rdx}, dst{_mul2})
->
    MACHINE(ip[0], state{next}, rdx[.], _mul2[.]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rdx}, dst{_mul2})
@ 1
'mov(rdx, _mul2) | rdx != 0, _mul2 == 0'
    MACHINE(ip[0], state{run}, rdx[2], _mul2[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rdx}, dst{_mul2}),
    UNIT(prev[2], r{rdx})
->
    MACHINE(ip[0], state{next}, rdx[.], _mul2[2]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{rdx}, dst{_mul2}),
    UNIT(prev[2], r{_mul2})
@ 1
'swp(rdx, _mul2) | rdx != 0, _mul2 != 0'
    MACHINE(ip[0], state{run}, rdx[2], _mul2[3]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{_mul2}),
    UNIT(prev[2], r{rdx}),
    UNIT(prev[3], r{_mul2})
->
    MACHINE(ip[0], state{next}, rdx[3], _mul2[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{_mul2}),
    UNIT(prev[2], r{_mul2}),
    UNIT(prev[3], r{rdx})
@ 1
'swp(rdx, _mul2) | _mul2 == 0'
    MACHINE(ip[0], state{run}, rdx[2], _mul2[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{_mul2}),
    UNIT(prev[2], r{rdx})
->
    MACHINE(ip[0], state{next}, rdx[.], _mul2[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{_mul2}),
    UNIT(prev[2], r{_mul2})
@ 1
'swp(rdx, _mul2) | rdx == 0, _mul2 != 0'
    MACHINE(ip[0], state{run}, rdx[.], _mul2[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{_mul2}),
    UNIT(prev[2], r{_mul2})
->
    MACHINE(ip[0], state{next}, rdx[2], _mul2[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{_mul2}),
    UNIT(prev[2], r{rdx})
@ 1
'swp(rdx, _mul2) | rdx == _mul2 == 0'
    MACHINE(ip[0], state{run}, rdx[.], _mul2[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{_mul2})
->
    MACHINE(ip[0], state{next}, rdx[.], _mul2[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{rdx}, dst{_mul2})
@ 1
'relabel_units | _mul1 -> rbx'
    UNIT(prev[_], next[0], r{_mul1}),
    UNIT(prev[0], r{rbx})
->
    UNIT(prev[_], next[0], r{_mul1}),
    UNIT(prev[0], r{_mul1})
@ inf
'add(_mul1, rbx) | _mul1 == 0'
    MACHINE(ip[0], state{run}, _mul1[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul1})
->
    MACHINE(ip[0], state{next}, _mul1[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul1})
@ 1
'add(_mul1, rbx) | rbx == 0'
    MACHINE(ip[0], state{run}, _mul1[2], rbx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul1}, dst{rbx}),
    UNIT(prev[2], r{_mul1})
->
    MACHINE(ip[0], state{next}, _mul1[.], rbx[2]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul1}, dst{rbx}),
    UNIT(prev[2], r{rbx})
@ 1
'add(_mul1, rbx) | _mul1 != 0'
    MACHINE(ip[0], state{run}, _mul1[2], rbx[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul1}, dst{rbx}),
    UNIT(prev[2], r{_mul1}),
    UNIT(next[.], r{rbx})
->
    MACHINE(ip[0], state{next}, _mul1[.], rbx[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul1}, dst{rbx}),
    UNIT(prev[2], r{rbx}),
    UNIT(next[2], r{rbx})
@ 1
'mov(_mul1, rbx) | _mul1 == 0'
    MACHINE(ip[0], state{run}, _mul1[.], rbx[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul1}, dst{rbx})
->
    MACHINE(ip[0], state{next}, _mul1[.], rbx[.]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul1}, dst{rbx})
@ 1
'mov(_mul1, rbx) | _mul1 != 0, rbx == 0'
    MACHINE(ip[0], state{run}, _mul1[2], rbx[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul1}, dst{rbx}),
    UNIT(prev[2], r{_mul1})
->
    MACHINE(ip[0], state{next}, _mul1[.], rbx[2]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul1}, dst{rbx}),
    UNIT(prev[2], r{rbx})
@ 1
'swp(_mul1, rbx) | _mul1 != 0, rbx != 0'
    MACHINE(ip[0], state{run}, _mul1[2], rbx[3]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{rbx}),
    UNIT(prev[2], r{_mul1}),
    UNIT(prev[3], r{rbx})
->
    MACHINE(ip[0], state{next}, _mul1[3], rbx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{rbx}),
    UNIT(prev[2], r{rbx}),
    UNIT(prev[3], r{_mul1})
@ 1
'swp(_mul1, rbx) | rbx == 0'
    MACHINE(ip[0], state{run}, _mul1[2], rbx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{rbx}),
    UNIT(prev[2], r{_mul1})
->
    MACHINE(ip[0], state{next}, _mul1[.], rbx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{rbx}),
    UNIT(prev[2], r{rbx})
@ 1
'swp(_mul1, rbx) | _mul1 == 0, rbx != 0'
    MACHINE(ip[0], state{run}, _mul1[.], rbx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{rbx}),
    UNIT(prev[2], r{rbx})
->
    MACHINE(ip[0], state{next}, _mul1[2], rbx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{rbx}),
    UNIT(prev[2], r{_mul1})
@ 1
'swp(_mul1, rbx) | _mul1 == rbx == 0'
    MACHINE(ip[0], state{run}, _mul1[.], rbx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{rbx})
->
    MACHINE(ip[0], state{next}, _mul1[.], rbx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{rbx})
@ 1
'relabel_units | _mul1 -> rax'
    UNIT(prev[_], next[0], r{_mul1}),
    UNIT(prev[0], r{rax})
->
    UNIT(prev[_], next[0], r{_mul1}),
    UNIT(prev[0], r{_mul1})
@ inf
'add(_mul1, rax) | _mul1 == 0'
    MACHINE(ip[0], state{run}, _mul1[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul1})
->
    MACHINE(ip[0], state{next}, _mul1[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul1})
@ 1
'add(_mul1, rax) | rax == 0'
    MACHINE(ip[0], state{run}, _mul1[2], rax[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul1}, dst{rax}),
    UNIT(prev[2], r{_mul1})
->
    MACHINE(ip[0], state{next}, _mul1[.], rax[2]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul1}, dst{rax}),
    UNIT(prev[2], r{rax})
@ 1
'add(_mul1, rax) | _mul1 != 0'
    MACHINE(ip[0], state{run}, _mul1[2], rax[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul1}, dst{rax}),
    UNIT(prev[2], r{_mul1}),
    UNIT(next[.], r{rax})
->
    MACHINE(ip[0], state{next}, _mul1[.], rax[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul1}, dst{rax}),
    UNIT(prev[2], r{rax}),
    UNIT(next[2], r{rax})
@ 1
'mov(_mul1, rax) | _mul1 == 0'
    MACHINE(ip[0], state{run}, _mul1[.], rax[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul1}, dst{rax})
->
    MACHINE(ip[0], state{next}, _mul1[.], rax[.]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul1}, dst{rax})
@ 1
'mov(_mul1, rax) | _mul1 != 0, rax == 0'
    MACHINE(ip[0], state{run}, _mul1[2], rax[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul1}, dst{rax}),
    UNIT(prev[2], r{_mul1})
->
    MACHINE(ip[0], state{next}, _mul1[.], rax[2]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul1}, dst{rax}),
    UNIT(prev[2], r{rax})
@ 1
'swp(_mul1, rax) | _mul1 != 0, rax != 0'
    MACHINE(ip[0], state{run}, _mul1[2], rax[3]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{rax}),
    UNIT(prev[2], r{_mul1}),
    UNIT(prev[3], r{rax})
->
    MACHINE(ip[0], state{next}, _mul1[3], rax[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{rax}),
    UNIT(prev[2], r{rax}),
    UNIT(prev[3], r{_mul1})
@ 1
'swp(_mul1, rax) | rax == 0'
    MACHINE(ip[0], state{run}, _mul1[2], rax[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{rax}),
    UNIT(prev[2], r{_mul1})
->
    MACHINE(ip[0], state{next}, _mul1[.], rax[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{rax}),
    UNIT(prev[2], r{rax})
@ 1
'swp(_mul1, rax) | _mul1 == 0, rax != 0'
    MACHINE(ip[0], state{run}, _mul1[.], rax[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{rax}),
    UNIT(prev[2], r{rax})
->
    MACHINE(ip[0], state{next}, _mul1[2], rax[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{rax}),
    UNIT(prev[2], r{_mul1})
@ 1
'swp(_mul1, rax) | _mul1 == rax == 0'
    MACHINE(ip[0], state{run}, _mul1[.], rax[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{rax})
->
    MACHINE(ip[0], state{next}, _mul1[.], rax[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{rax})
@ 1
'relabel_units | _mul1 -> rcx'
    UNIT(prev[_], next[0], r{_mul1}),
    UNIT(prev[0], r{rcx})
->
    UNIT(prev[_], next[0], r{_mul1}),
    UNIT(prev[0], r{_mul1})
@ inf
'add(_mul1, rcx) | _mul1 == 0'
    MACHINE(ip[0], state{run}, _mul1[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul1})
->
    MACHINE(ip[0], state{next}, _mul1[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul1})
@ 1
'add(_mul1, rcx) | rcx == 0'
    MACHINE(ip[0], state{run}, _mul1[2], rcx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul1}, dst{rcx}),
    UNIT(prev[2], r{_mul1})
->
    MACHINE(ip[0], state{next}, _mul1[.], rcx[2]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul1}, dst{rcx}),
    UNIT(prev[2], r{rcx})
@ 1
'add(_mul1, rcx) | _mul1 != 0'
    MACHINE(ip[0], state{run}, _mul1[2], rcx[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul1}, dst{rcx}),
    UNIT(prev[2], r{_mul1}),
    UNIT(next[.], r{rcx})
->
    MACHINE(ip[0], state{next}, _mul1[.], rcx[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul1}, dst{rcx}),
    UNIT(prev[2], r{rcx}),
    UNIT(next[2], r{rcx})
@ 1
'mov(_mul1, rcx) | _mul1 == 0'
    MACHINE(ip[0], state{run}, _mul1[.], rcx[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul1}, dst{rcx})
->
    MACHINE(ip[0], state{next}, _mul1[.], rcx[.]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul1}, dst{rcx})
@ 1
'mov(_mul1, rcx) | _mul1 != 0, rcx == 0'
    MACHINE(ip[0], state{run}, _mul1[2], rcx[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul1}, dst{rcx}),
    UNIT(prev[2], r{_mul1})
->
    MACHINE(ip[0], state{next}, _mul1[.], rcx[2]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul1}, dst{rcx}),
    UNIT(prev[2], r{rcx})
@ 1
'swp(_mul1, rcx) | _mul1 != 0, rcx != 0'
    MACHINE(ip[0], state{run}, _mul1[2], rcx[3]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{rcx}),
    UNIT(prev[2], r{_mul1}),
    UNIT(prev[3], r{rcx})
->
    MACHINE(ip[0], state{next}, _mul1[3], rcx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{rcx}),
    UNIT(prev[2], r{rcx}),
    UNIT(prev[3], r{_mul1})
@ 1
'swp(_mul1, rcx) | rcx == 0'
    MACHINE(ip[0], state{run}, _mul1[2], rcx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{rcx}),
    UNIT(prev[2], r{_mul1})
->
    MACHINE(ip[0], state{next}, _mul1[.], rcx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{rcx}),
    UNIT(prev[2], r{rcx})
@ 1
'swp(_mul1, rcx) | _mul1 == 0, rcx != 0'
    MACHINE(ip[0], state{run}, _mul1[.], rcx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{rcx}),
    UNIT(prev[2], r{rcx})
->
    MACHINE(ip[0], state{next}, _mul1[2], rcx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{rcx}),
    UNIT(prev[2], r{_mul1})
@ 1
'swp(_mul1, rcx) | _mul1 == rcx == 0'
    MACHINE(ip[0], state{run}, _mul1[.], rcx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{rcx})
->
    MACHINE(ip[0], state{next}, _mul1[.], rcx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{rcx})
@ 1
'relabel_units | _mul1 -> _cpy'
    UNIT(prev[_], next[0], r{_mul1}),
    UNIT(prev[0], r{_cpy})
->
    UNIT(prev[_], next[0], r{_mul1}),
    UNIT(prev[0], r{_mul1})
@ inf
'add(_mul1, _cpy) | _mul1 == 0'
    MACHINE(ip[0], state{run}, _mul1[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul1})
->
    MACHINE(ip[0], state{next}, _mul1[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul1})
@ 1
'add(_mul1, _cpy) | _cpy == 0'
    MACHINE(ip[0], state{run}, _mul1[2], _cpy[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul1}, dst{_cpy}),
    UNIT(prev[2], r{_mul1})
->
    MACHINE(ip[0], state{next}, _mul1[.], _cpy[2]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul1}, dst{_cpy}),
    UNIT(prev[2], r{_cpy})
@ 1
'add(_mul1, _cpy) | _mul1 != 0'
    MACHINE(ip[0], state{run}, _mul1[2], _cpy[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul1}, dst{_cpy}),
    UNIT(prev[2], r{_mul1}),
    UNIT(next[.], r{_cpy})
->
    MACHINE(ip[0], state{next}, _mul1[.], _cpy[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul1}, dst{_cpy}),
    UNIT(prev[2], r{_cpy}),
    UNIT(next[2], r{_cpy})
@ 1
'mov(_mul1, _cpy) | _mul1 == 0'
    MACHINE(ip[0], state{run}, _mul1[.], _cpy[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul1}, dst{_cpy})
->
    MACHINE(ip[0], state{next}, _mul1[.], _cpy[.]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul1}, dst{_cpy})
@ 1
'mov(_mul1, _cpy) | _mul1 != 0, _cpy == 0'
    MACHINE(ip[0], state{run}, _mul1[2], _cpy[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul1}, dst{_cpy}),
    UNIT(prev[2], r{_mul1})
->
    MACHINE(ip[0], state{next}, _mul1[.], _cpy[2]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul1}, dst{_cpy}),
    UNIT(prev[2], r{_cpy})
@ 1
'swp(_mul1, _cpy) | _mul1 != 0, _cpy != 0'
    MACHINE(ip[0], state{run}, _mul1[2], _cpy[3]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{_cpy}),
    UNIT(prev[2], r{_mul1}),
    UNIT(prev[3], r{_cpy})
->
    MACHINE(ip[0], state{next}, _mul1[3], _cpy[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{_cpy}),
    UNIT(prev[2], r{_cpy}),
    UNIT(prev[3], r{_mul1})
@ 1
'swp(_mul1, _cpy) | _cpy == 0'
    MACHINE(ip[0], state{run}, _mul1[2], _cpy[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{_cpy}),
    UNIT(prev[2], r{_mul1})
->
    MACHINE(ip[0], state{next}, _mul1[.], _cpy[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{_cpy}),
    UNIT(prev[2], r{_cpy})
@ 1
'swp(_mul1, _cpy) | _mul1 == 0, _cpy != 0'
    MACHINE(ip[0], state{run}, _mul1[.], _cpy[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{_cpy}),
    UNIT(prev[2], r{_cpy})
->
    MACHINE(ip[0], state{next}, _mul1[2], _cpy[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{_cpy}),
    UNIT(prev[2], r{_mul1})
@ 1
'swp(_mul1, _cpy) | _mul1 == _cpy == 0'
    MACHINE(ip[0], state{run}, _mul1[.], _cpy[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{_cpy})
->
    MACHINE(ip[0], state{next}, _mul1[.], _cpy[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{_cpy})
@ 1
'relabel_units | _mul1 -> rdx'
    UNIT(prev[_], next[0], r{_mul1}),
    UNIT(prev[0], r{rdx})
->
    UNIT(prev[_], next[0], r{_mul1}),
    UNIT(prev[0], r{_mul1})
@ inf
'add(_mul1, rdx) | _mul1 == 0'
    MACHINE(ip[0], state{run}, _mul1[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul1})
->
    MACHINE(ip[0], state{next}, _mul1[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul1})
@ 1
'add(_mul1, rdx) | rdx == 0'
    MACHINE(ip[0], state{run}, _mul1[2], rdx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul1}, dst{rdx}),
    UNIT(prev[2], r{_mul1})
->
    MACHINE(ip[0], state{next}, _mul1[.], rdx[2]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul1}, dst{rdx}),
    UNIT(prev[2], r{rdx})
@ 1
'add(_mul1, rdx) | _mul1 != 0'
    MACHINE(ip[0], state{run}, _mul1[2], rdx[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul1}, dst{rdx}),
    UNIT(prev[2], r{_mul1}),
    UNIT(next[.], r{rdx})
->
    MACHINE(ip[0], state{next}, _mul1[.], rdx[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul1}, dst{rdx}),
    UNIT(prev[2], r{rdx}),
    UNIT(next[2], r{rdx})
@ 1
'mov(_mul1, rdx) | _mul1 == 0'
    MACHINE(ip[0], state{run}, _mul1[.], rdx[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul1}, dst{rdx})
->
    MACHINE(ip[0], state{next}, _mul1[.], rdx[.]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul1}, dst{rdx})
@ 1
'mov(_mul1, rdx) | _mul1 != 0, rdx == 0'
    MACHINE(ip[0], state{run}, _mul1[2], rdx[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul1}, dst{rdx}),
    UNIT(prev[2], r{_mul1})
->
    MACHINE(ip[0], state{next}, _mul1[.], rdx[2]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul1}, dst{rdx}),
    UNIT(prev[2], r{rdx})
@ 1
'swp(_mul1, rdx) | _mul1 != 0, rdx != 0'
    MACHINE(ip[0], state{run}, _mul1[2], rdx[3]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{rdx}),
    UNIT(prev[2], r{_mul1}),
    UNIT(prev[3], r{rdx})
->
    MACHINE(ip[0], state{next}, _mul1[3], rdx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{rdx}),
    UNIT(prev[2], r{rdx}),
    UNIT(prev[3], r{_mul1})
@ 1
'swp(_mul1, rdx) | rdx == 0'
    MACHINE(ip[0], state{run}, _mul1[2], rdx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{rdx}),
    UNIT(prev[2], r{_mul1})
->
    MACHINE(ip[0], state{next}, _mul1[.], rdx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{rdx}),
    UNIT(prev[2], r{rdx})
@ 1
'swp(_mul1, rdx) | _mul1 == 0, rdx != 0'
    MACHINE(ip[0], state{run}, _mul1[.], rdx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{rdx}),
    UNIT(prev[2], r{rdx})
->
    MACHINE(ip[0], state{next}, _mul1[2], rdx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{rdx}),
    UNIT(prev[2], r{_mul1})
@ 1
'swp(_mul1, rdx) | _mul1 == rdx == 0'
    MACHINE(ip[0], state{run}, _mul1[.], rdx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{rdx})
->
    MACHINE(ip[0], state{next}, _mul1[.], rdx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{rdx})
@ 1
'relabel_units | _mul1 -> _mul2'
    UNIT(prev[_], next[0], r{_mul1}),
    UNIT(prev[0], r{_mul2})
->
    UNIT(prev[_], next[0], r{_mul1}),
    UNIT(prev[0], r{_mul1})
@ inf
'add(_mul1, _mul2) | _mul1 == 0'
    MACHINE(ip[0], state{run}, _mul1[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul1})
->
    MACHINE(ip[0], state{next}, _mul1[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul1})
@ 1
'add(_mul1, _mul2) | _mul2 == 0'
    MACHINE(ip[0], state{run}, _mul1[2], _mul2[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul1}, dst{_mul2}),
    UNIT(prev[2], r{_mul1})
->
    MACHINE(ip[0], state{next}, _mul1[.], _mul2[2]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul1}, dst{_mul2}),
    UNIT(prev[2], r{_mul2})
@ 1
'add(_mul1, _mul2) | _mul1 != 0'
    MACHINE(ip[0], state{run}, _mul1[2], _mul2[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul1}, dst{_mul2}),
    UNIT(prev[2], r{_mul1}),
    UNIT(next[.], r{_mul2})
->
    MACHINE(ip[0], state{next}, _mul1[.], _mul2[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul1}, dst{_mul2}),
    UNIT(prev[2], r{_mul2}),
    UNIT(next[2], r{_mul2})
@ 1
'mov(_mul1, _mul2) | _mul1 == 0'
    MACHINE(ip[0], state{run}, _mul1[.], _mul2[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul1}, dst{_mul2})
->
    MACHINE(ip[0], state{next}, _mul1[.], _mul2[.]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul1}, dst{_mul2})
@ 1
'mov(_mul1, _mul2) | _mul1 != 0, _mul2 == 0'
    MACHINE(ip[0], state{run}, _mul1[2], _mul2[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul1}, dst{_mul2}),
    UNIT(prev[2], r{_mul1})
->
    MACHINE(ip[0], state{next}, _mul1[.], _mul2[2]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul1}, dst{_mul2}),
    UNIT(prev[2], r{_mul2})
@ 1
'swp(_mul1, _mul2) | _mul1 != 0, _mul2 != 0'
    MACHINE(ip[0], state{run}, _mul1[2], _mul2[3]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{_mul2}),
    UNIT(prev[2], r{_mul1}),
    UNIT(prev[3], r{_mul2})
->
    MACHINE(ip[0], state{next}, _mul1[3], _mul2[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{_mul2}),
    UNIT(prev[2], r{_mul2}),
    UNIT(prev[3], r{_mul1})
@ 1
'swp(_mul1, _mul2) | _mul2 == 0'
    MACHINE(ip[0], state{run}, _mul1[2], _mul2[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{_mul2}),
    UNIT(prev[2], r{_mul1})
->
    MACHINE(ip[0], state{next}, _mul1[.], _mul2[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{_mul2}),
    UNIT(prev[2], r{_mul2})
@ 1
'swp(_mul1, _mul2) | _mul1 == 0, _mul2 != 0'
    MACHINE(ip[0], state{run}, _mul1[.], _mul2[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{_mul2}),
    UNIT(prev[2], r{_mul2})
->
    MACHINE(ip[0], state{next}, _mul1[2], _mul2[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{_mul2}),
    UNIT(prev[2], r{_mul1})
@ 1
'swp(_mul1, _mul2) | _mul1 == _mul2 == 0'
    MACHINE(ip[0], state{run}, _mul1[.], _mul2[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{_mul2})
->
    MACHINE(ip[0], state{next}, _mul1[.], _mul2[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul1}, dst{_mul2})
@ 1
'relabel_units | _mul2 -> rbx'
    UNIT(prev[_], next[0], r{_mul2}),
    UNIT(prev[0], r{rbx})
->
    UNIT(prev[_], next[0], r{_mul2}),
    UNIT(prev[0], r{_mul2})
@ inf
'add(_mul2, rbx) | _mul2 == 0'
    MACHINE(ip[0], state{run}, _mul2[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul2})
->
    MACHINE(ip[0], state{next}, _mul2[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul2})
@ 1
'add(_mul2, rbx) | rbx == 0'
    MACHINE(ip[0], state{run}, _mul2[2], rbx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul2}, dst{rbx}),
    UNIT(prev[2], r{_mul2})
->
    MACHINE(ip[0], state{next}, _mul2[.], rbx[2]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul2}, dst{rbx}),
    UNIT(prev[2], r{rbx})
@ 1
'add(_mul2, rbx) | _mul2 != 0'
    MACHINE(ip[0], state{run}, _mul2[2], rbx[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul2}, dst{rbx}),
    UNIT(prev[2], r{_mul2}),
    UNIT(next[.], r{rbx})
->
    MACHINE(ip[0], state{next}, _mul2[.], rbx[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul2}, dst{rbx}),
    UNIT(prev[2], r{rbx}),
    UNIT(next[2], r{rbx})
@ 1
'mov(_mul2, rbx) | _mul2 == 0'
    MACHINE(ip[0], state{run}, _mul2[.], rbx[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul2}, dst{rbx})
->
    MACHINE(ip[0], state{next}, _mul2[.], rbx[.]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul2}, dst{rbx})
@ 1
'mov(_mul2, rbx) | _mul2 != 0, rbx == 0'
    MACHINE(ip[0], state{run}, _mul2[2], rbx[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul2}, dst{rbx}),
    UNIT(prev[2], r{_mul2})
->
    MACHINE(ip[0], state{next}, _mul2[.], rbx[2]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul2}, dst{rbx}),
    UNIT(prev[2], r{rbx})
@ 1
'swp(_mul2, rbx) | _mul2 != 0, rbx != 0'
    MACHINE(ip[0], state{run}, _mul2[2], rbx[3]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{rbx}),
    UNIT(prev[2], r{_mul2}),
    UNIT(prev[3], r{rbx})
->
    MACHINE(ip[0], state{next}, _mul2[3], rbx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{rbx}),
    UNIT(prev[2], r{rbx}),
    UNIT(prev[3], r{_mul2})
@ 1
'swp(_mul2, rbx) | rbx == 0'
    MACHINE(ip[0], state{run}, _mul2[2], rbx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{rbx}),
    UNIT(prev[2], r{_mul2})
->
    MACHINE(ip[0], state{next}, _mul2[.], rbx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{rbx}),
    UNIT(prev[2], r{rbx})
@ 1
'swp(_mul2, rbx) | _mul2 == 0, rbx != 0'
    MACHINE(ip[0], state{run}, _mul2[.], rbx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{rbx}),
    UNIT(prev[2], r{rbx})
->
    MACHINE(ip[0], state{next}, _mul2[2], rbx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{rbx}),
    UNIT(prev[2], r{_mul2})
@ 1
'swp(_mul2, rbx) | _mul2 == rbx == 0'
    MACHINE(ip[0], state{run}, _mul2[.], rbx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{rbx})
->
    MACHINE(ip[0], state{next}, _mul2[.], rbx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{rbx})
@ 1
'relabel_units | _mul2 -> rax'
    UNIT(prev[_], next[0], r{_mul2}),
    UNIT(prev[0], r{rax})
->
    UNIT(prev[_], next[0], r{_mul2}),
    UNIT(prev[0], r{_mul2})
@ inf
'add(_mul2, rax) | _mul2 == 0'
    MACHINE(ip[0], state{run}, _mul2[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul2})
->
    MACHINE(ip[0], state{next}, _mul2[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul2})
@ 1
'add(_mul2, rax) | rax == 0'
    MACHINE(ip[0], state{run}, _mul2[2], rax[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul2}, dst{rax}),
    UNIT(prev[2], r{_mul2})
->
    MACHINE(ip[0], state{next}, _mul2[.], rax[2]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul2}, dst{rax}),
    UNIT(prev[2], r{rax})
@ 1
'add(_mul2, rax) | _mul2 != 0'
    MACHINE(ip[0], state{run}, _mul2[2], rax[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul2}, dst{rax}),
    UNIT(prev[2], r{_mul2}),
    UNIT(next[.], r{rax})
->
    MACHINE(ip[0], state{next}, _mul2[.], rax[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul2}, dst{rax}),
    UNIT(prev[2], r{rax}),
    UNIT(next[2], r{rax})
@ 1
'mov(_mul2, rax) | _mul2 == 0'
    MACHINE(ip[0], state{run}, _mul2[.], rax[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul2}, dst{rax})
->
    MACHINE(ip[0], state{next}, _mul2[.], rax[.]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul2}, dst{rax})
@ 1
'mov(_mul2, rax) | _mul2 != 0, rax == 0'
    MACHINE(ip[0], state{run}, _mul2[2], rax[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul2}, dst{rax}),
    UNIT(prev[2], r{_mul2})
->
    MACHINE(ip[0], state{next}, _mul2[.], rax[2]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul2}, dst{rax}),
    UNIT(prev[2], r{rax})
@ 1
'swp(_mul2, rax) | _mul2 != 0, rax != 0'
    MACHINE(ip[0], state{run}, _mul2[2], rax[3]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{rax}),
    UNIT(prev[2], r{_mul2}),
    UNIT(prev[3], r{rax})
->
    MACHINE(ip[0], state{next}, _mul2[3], rax[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{rax}),
    UNIT(prev[2], r{rax}),
    UNIT(prev[3], r{_mul2})
@ 1
'swp(_mul2, rax) | rax == 0'
    MACHINE(ip[0], state{run}, _mul2[2], rax[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{rax}),
    UNIT(prev[2], r{_mul2})
->
    MACHINE(ip[0], state{next}, _mul2[.], rax[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{rax}),
    UNIT(prev[2], r{rax})
@ 1
'swp(_mul2, rax) | _mul2 == 0, rax != 0'
    MACHINE(ip[0], state{run}, _mul2[.], rax[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{rax}),
    UNIT(prev[2], r{rax})
->
    MACHINE(ip[0], state{next}, _mul2[2], rax[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{rax}),
    UNIT(prev[2], r{_mul2})
@ 1
'swp(_mul2, rax) | _mul2 == rax == 0'
    MACHINE(ip[0], state{run}, _mul2[.], rax[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{rax})
->
    MACHINE(ip[0], state{next}, _mul2[.], rax[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{rax})
@ 1
'relabel_units | _mul2 -> rcx'
    UNIT(prev[_], next[0], r{_mul2}),
    UNIT(prev[0], r{rcx})
->
    UNIT(prev[_], next[0], r{_mul2}),
    UNIT(prev[0], r{_mul2})
@ inf
'add(_mul2, rcx) | _mul2 == 0'
    MACHINE(ip[0], state{run}, _mul2[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul2})
->
    MACHINE(ip[0], state{next}, _mul2[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul2})
@ 1
'add(_mul2, rcx) | rcx == 0'
    MACHINE(ip[0], state{run}, _mul2[2], rcx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul2}, dst{rcx}),
    UNIT(prev[2], r{_mul2})
->
    MACHINE(ip[0], state{next}, _mul2[.], rcx[2]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul2}, dst{rcx}),
    UNIT(prev[2], r{rcx})
@ 1
'add(_mul2, rcx) | _mul2 != 0'
    MACHINE(ip[0], state{run}, _mul2[2], rcx[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul2}, dst{rcx}),
    UNIT(prev[2], r{_mul2}),
    UNIT(next[.], r{rcx})
->
    MACHINE(ip[0], state{next}, _mul2[.], rcx[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul2}, dst{rcx}),
    UNIT(prev[2], r{rcx}),
    UNIT(next[2], r{rcx})
@ 1
'mov(_mul2, rcx) | _mul2 == 0'
    MACHINE(ip[0], state{run}, _mul2[.], rcx[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul2}, dst{rcx})
->
    MACHINE(ip[0], state{next}, _mul2[.], rcx[.]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul2}, dst{rcx})
@ 1
'mov(_mul2, rcx) | _mul2 != 0, rcx == 0'
    MACHINE(ip[0], state{run}, _mul2[2], rcx[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul2}, dst{rcx}),
    UNIT(prev[2], r{_mul2})
->
    MACHINE(ip[0], state{next}, _mul2[.], rcx[2]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul2}, dst{rcx}),
    UNIT(prev[2], r{rcx})
@ 1
'swp(_mul2, rcx) | _mul2 != 0, rcx != 0'
    MACHINE(ip[0], state{run}, _mul2[2], rcx[3]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{rcx}),
    UNIT(prev[2], r{_mul2}),
    UNIT(prev[3], r{rcx})
->
    MACHINE(ip[0], state{next}, _mul2[3], rcx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{rcx}),
    UNIT(prev[2], r{rcx}),
    UNIT(prev[3], r{_mul2})
@ 1
'swp(_mul2, rcx) | rcx == 0'
    MACHINE(ip[0], state{run}, _mul2[2], rcx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{rcx}),
    UNIT(prev[2], r{_mul2})
->
    MACHINE(ip[0], state{next}, _mul2[.], rcx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{rcx}),
    UNIT(prev[2], r{rcx})
@ 1
'swp(_mul2, rcx) | _mul2 == 0, rcx != 0'
    MACHINE(ip[0], state{run}, _mul2[.], rcx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{rcx}),
    UNIT(prev[2], r{rcx})
->
    MACHINE(ip[0], state{next}, _mul2[2], rcx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{rcx}),
    UNIT(prev[2], r{_mul2})
@ 1
'swp(_mul2, rcx) | _mul2 == rcx == 0'
    MACHINE(ip[0], state{run}, _mul2[.], rcx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{rcx})
->
    MACHINE(ip[0], state{next}, _mul2[.], rcx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{rcx})
@ 1
'relabel_units | _mul2 -> _cpy'
    UNIT(prev[_], next[0], r{_mul2}),
    UNIT(prev[0], r{_cpy})
->
    UNIT(prev[_], next[0], r{_mul2}),
    UNIT(prev[0], r{_mul2})
@ inf
'add(_mul2, _cpy) | _mul2 == 0'
    MACHINE(ip[0], state{run}, _mul2[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul2})
->
    MACHINE(ip[0], state{next}, _mul2[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul2})
@ 1
'add(_mul2, _cpy) | _cpy == 0'
    MACHINE(ip[0], state{run}, _mul2[2], _cpy[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul2}, dst{_cpy}),
    UNIT(prev[2], r{_mul2})
->
    MACHINE(ip[0], state{next}, _mul2[.], _cpy[2]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul2}, dst{_cpy}),
    UNIT(prev[2], r{_cpy})
@ 1
'add(_mul2, _cpy) | _mul2 != 0'
    MACHINE(ip[0], state{run}, _mul2[2], _cpy[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul2}, dst{_cpy}),
    UNIT(prev[2], r{_mul2}),
    UNIT(next[.], r{_cpy})
->
    MACHINE(ip[0], state{next}, _mul2[.], _cpy[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul2}, dst{_cpy}),
    UNIT(prev[2], r{_cpy}),
    UNIT(next[2], r{_cpy})
@ 1
'mov(_mul2, _cpy) | _mul2 == 0'
    MACHINE(ip[0], state{run}, _mul2[.], _cpy[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul2}, dst{_cpy})
->
    MACHINE(ip[0], state{next}, _mul2[.], _cpy[.]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul2}, dst{_cpy})
@ 1
'mov(_mul2, _cpy) | _mul2 != 0, _cpy == 0'
    MACHINE(ip[0], state{run}, _mul2[2], _cpy[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul2}, dst{_cpy}),
    UNIT(prev[2], r{_mul2})
->
    MACHINE(ip[0], state{next}, _mul2[.], _cpy[2]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul2}, dst{_cpy}),
    UNIT(prev[2], r{_cpy})
@ 1
'swp(_mul2, _cpy) | _mul2 != 0, _cpy != 0'
    MACHINE(ip[0], state{run}, _mul2[2], _cpy[3]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{_cpy}),
    UNIT(prev[2], r{_mul2}),
    UNIT(prev[3], r{_cpy})
->
    MACHINE(ip[0], state{next}, _mul2[3], _cpy[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{_cpy}),
    UNIT(prev[2], r{_cpy}),
    UNIT(prev[3], r{_mul2})
@ 1
'swp(_mul2, _cpy) | _cpy == 0'
    MACHINE(ip[0], state{run}, _mul2[2], _cpy[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{_cpy}),
    UNIT(prev[2], r{_mul2})
->
    MACHINE(ip[0], state{next}, _mul2[.], _cpy[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{_cpy}),
    UNIT(prev[2], r{_cpy})
@ 1
'swp(_mul2, _cpy) | _mul2 == 0, _cpy != 0'
    MACHINE(ip[0], state{run}, _mul2[.], _cpy[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{_cpy}),
    UNIT(prev[2], r{_cpy})
->
    MACHINE(ip[0], state{next}, _mul2[2], _cpy[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{_cpy}),
    UNIT(prev[2], r{_mul2})
@ 1
'swp(_mul2, _cpy) | _mul2 == _cpy == 0'
    MACHINE(ip[0], state{run}, _mul2[.], _cpy[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{_cpy})
->
    MACHINE(ip[0], state{next}, _mul2[.], _cpy[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{_cpy})
@ 1
'relabel_units | _mul2 -> rdx'
    UNIT(prev[_], next[0], r{_mul2}),
    UNIT(prev[0], r{rdx})
->
    UNIT(prev[_], next[0], r{_mul2}),
    UNIT(prev[0], r{_mul2})
@ inf
'add(_mul2, rdx) | _mul2 == 0'
    MACHINE(ip[0], state{run}, _mul2[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul2})
->
    MACHINE(ip[0], state{next}, _mul2[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul2})
@ 1
'add(_mul2, rdx) | rdx == 0'
    MACHINE(ip[0], state{run}, _mul2[2], rdx[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul2}, dst{rdx}),
    UNIT(prev[2], r{_mul2})
->
    MACHINE(ip[0], state{next}, _mul2[.], rdx[2]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul2}, dst{rdx}),
    UNIT(prev[2], r{rdx})
@ 1
'add(_mul2, rdx) | _mul2 != 0'
    MACHINE(ip[0], state{run}, _mul2[2], rdx[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul2}, dst{rdx}),
    UNIT(prev[2], r{_mul2}),
    UNIT(next[.], r{rdx})
->
    MACHINE(ip[0], state{next}, _mul2[.], rdx[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul2}, dst{rdx}),
    UNIT(prev[2], r{rdx}),
    UNIT(next[2], r{rdx})
@ 1
'mov(_mul2, rdx) | _mul2 == 0'
    MACHINE(ip[0], state{run}, _mul2[.], rdx[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul2}, dst{rdx})
->
    MACHINE(ip[0], state{next}, _mul2[.], rdx[.]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul2}, dst{rdx})
@ 1
'mov(_mul2, rdx) | _mul2 != 0, rdx == 0'
    MACHINE(ip[0], state{run}, _mul2[2], rdx[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul2}, dst{rdx}),
    UNIT(prev[2], r{_mul2})
->
    MACHINE(ip[0], state{next}, _mul2[.], rdx[2]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul2}, dst{rdx}),
    UNIT(prev[2], r{rdx})
@ 1
'swp(_mul2, rdx) | _mul2 != 0, rdx != 0'
    MACHINE(ip[0], state{run}, _mul2[2], rdx[3]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{rdx}),
    UNIT(prev[2], r{_mul2}),
    UNIT(prev[3], r{rdx})
->
    MACHINE(ip[0], state{next}, _mul2[3], rdx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{rdx}),
    UNIT(prev[2], r{rdx}),
    UNIT(prev[3], r{_mul2})
@ 1
'swp(_mul2, rdx) | rdx == 0'
    MACHINE(ip[0], state{run}, _mul2[2], rdx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{rdx}),
    UNIT(prev[2], r{_mul2})
->
    MACHINE(ip[0], state{next}, _mul2[.], rdx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{rdx}),
    UNIT(prev[2], r{rdx})
@ 1
'swp(_mul2, rdx) | _mul2 == 0, rdx != 0'
    MACHINE(ip[0], state{run}, _mul2[.], rdx[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{rdx}),
    UNIT(prev[2], r{rdx})
->
    MACHINE(ip[0], state{next}, _mul2[2], rdx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{rdx}),
    UNIT(prev[2], r{_mul2})
@ 1
'swp(_mul2, rdx) | _mul2 == rdx == 0'
    MACHINE(ip[0], state{run}, _mul2[.], rdx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{rdx})
->
    MACHINE(ip[0], state{next}, _mul2[.], rdx[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{rdx})
@ 1
'relabel_units | _mul2 -> _mul1'
    UNIT(prev[_], next[0], r{_mul2}),
    UNIT(prev[0], r{_mul1})
->
    UNIT(prev[_], next[0], r{_mul2}),
    UNIT(prev[0], r{_mul2})
@ inf
'add(_mul2, _mul1) | _mul2 == 0'
    MACHINE(ip[0], state{run}, _mul2[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul2})
->
    MACHINE(ip[0], state{next}, _mul2[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul2})
@ 1
'add(_mul2, _mul1) | _mul1 == 0'
    MACHINE(ip[0], state{run}, _mul2[2], _mul1[.]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul2}, dst{_mul1}),
    UNIT(prev[2], r{_mul2})
->
    MACHINE(ip[0], state{next}, _mul2[.], _mul1[2]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul2}, dst{_mul1}),
    UNIT(prev[2], r{_mul1})
@ 1
'add(_mul2, _mul1) | _mul2 != 0'
    MACHINE(ip[0], state{run}, _mul2[2], _mul1[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul2}, dst{_mul1}),
    UNIT(prev[2], r{_mul2}),
    UNIT(next[.], r{_mul1})
->
    MACHINE(ip[0], state{next}, _mul2[.], _mul1[_]),
    PROG(cm[0], ins[1]),
    ADD(prog[1], src{_mul2}, dst{_mul1}),
    UNIT(prev[2], r{_mul1}),
    UNIT(next[2], r{_mul1})
@ 1
'mov(_mul2, _mul1) | _mul2 == 0'
    MACHINE(ip[0], state{run}, _mul2[.], _mul1[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul2}, dst{_mul1})
->
    MACHINE(ip[0], state{next}, _mul2[.], _mul1[.]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul2}, dst{_mul1})
@ 1
'mov(_mul2, _mul1) | _mul2 != 0, _mul1 == 0'
    MACHINE(ip[0], state{run}, _mul2[2], _mul1[#]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul2}, dst{_mul1}),
    UNIT(prev[2], r{_mul2})
->
    MACHINE(ip[0], state{next}, _mul2[.], _mul1[2]),
    PROG(cm[0], ins[1]),
    MOV(prog[1], src{_mul2}, dst{_mul1}),
    UNIT(prev[2], r{_mul1})
@ 1
'swp(_mul2, _mul1) | _mul2 != 0, _mul1 != 0'
    MACHINE(ip[0], state{run}, _mul2[2], _mul1[3]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{_mul1}),
    UNIT(prev[2], r{_mul2}),
    UNIT(prev[3], r{_mul1})
->
    MACHINE(ip[0], state{next}, _mul2[3], _mul1[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{_mul1}),
    UNIT(prev[2], r{_mul1}),
    UNIT(prev[3], r{_mul2})
@ 1
'swp(_mul2, _mul1) | _mul1 == 0'
    MACHINE(ip[0], state{run}, _mul2[2], _mul1[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{_mul1}),
    UNIT(prev[2], r{_mul2})
->
    MACHINE(ip[0], state{next}, _mul2[.], _mul1[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{_mul1}),
    UNIT(prev[2], r{_mul1})
@ 1
'swp(_mul2, _mul1) | _mul2 == 0, _mul1 != 0'
    MACHINE(ip[0], state{run}, _mul2[.], _mul1[2]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{_mul1}),
    UNIT(prev[2], r{_mul1})
->
    MACHINE(ip[0], state{next}, _mul2[2], _mul1[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{_mul1}),
    UNIT(prev[2], r{_mul2})
@ 1
'swp(_mul2, _mul1) | _mul2 == _mul1 == 0'
    MACHINE(ip[0], state{run}, _mul2[.], _mul1[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{_mul1})
->
    MACHINE(ip[0], state{next}, _mul2[.], _mul1[.]),
    PROG(cm[0], ins[1]),
    SWP(prog[1], src{_mul2}, dst{_mul1})
@ 1

%init: 10000 UNIT(
    prev[.],
    next[.],
    r{_none}
)
%init: 1 MACHINE(
    state{run},
    ip[0]
),
PROG(
    cm[0],
    ins[1],
    next[2]
),
LBL(
    prog[1],
    l{start}
),
PROG(
    prev[2],
    ins[3],
    next[4]
),
CLR(
    prog[3],
    r{rbx}
),
PROG(
    prev[4],
    ins[5],
    next[6]
),
INC(
    prog[5],
    r{rbx}
),
PROG(
    prev[6],
    ins[7],
    next[8]
),
INC(
    prog[7],
    r{rbx}
),
PROG(
    prev[8],
    ins[9],
    next[10]
),
INC(
    prog[9],
    r{rbx}
),
PROG(
    prev[10],
    ins[11],
    next[12]
),
CLR(
    prog[11],
    r{rax}
),
PROG(
    prev[12],
    ins[13],
    next[14]
),
INC(
    prog[13],
    r{rax}
),
PROG(
    prev[14],
    ins[15],
    next[16]
),
INC(
    prog[15],
    r{rax}
),
PROG(
    prev[16],
    ins[17],
    next[18]
),
INC(
    prog[17],
    r{rax}
),
PROG(
    prev[18],
    ins[19],
    next[20]
),
INC(
    prog[19],
    r{rax}
),
PROG(
    prev[20],
    ins[21],
    next[22]
),
JNZ(
    prog[21],
    r{rbx},
    l{exp_nonzero}
),
PROG(
    prev[22],
    ins[23],
    next[24]
),
LBL(
    prog[23],
    l{exp_zero}
),
PROG(
    prev[24],
    ins[25],
    next[26]
),
CLR(
    prog[25],
    r{rax}
),
PROG(
    prev[26],
    ins[27],
    next[28]
),
CLR(
    prog[27],
    r{rbx}
),
PROG(
    prev[28],
    ins[29],
    next[30]
),
INC(
    prog[29],
    r{rbx}
),
PROG(
    prev[30],
    ins[31],
    next[32]
),
JMP(
    prog[31],
    l{exp_after}
),
PROG(
    prev[32],
    ins[33],
    next[34]
),
LBL(
    prog[33],
    l{exp_nonzero}
),
PROG(
    prev[34],
    ins[35],
    next[36]
),
DEC(
    prog[35],
    r{rbx}
),
PROG(
    prev[36],
    ins[37],
    next[38]
),
SWP(
    prog[37],
    src{rax},
    dst{rbx}
),
PROG(
    prev[38],
    ins[39],
    next[40]
),
CLR(
    prog[39],
    r{rcx}
),
PROG(
    prev[40],
    ins[41],
    next[42]
),
MOV(
    prog[41],
    src{rbx},
    dst{_cpy}
),
PROG(
    prev[42],
    ins[43],
    next[44]
),
LBL(
    prog[43],
    l{_cpy_1}
),
PROG(
    prev[44],
    ins[45],
    next[46]
),
INC(
    prog[45],
    r{rbx}
),
PROG(
    prev[46],
    ins[47],
    next[48]
),
INC(
    prog[47],
    r{rcx}
),
PROG(
    prev[48],
    ins[49],
    next[50]
),
DEC(
    prog[49],
    r{_cpy}
),
PROG(
    prev[50],
    ins[51],
    next[52]
),
JNZ(
    prog[51],
    r{_cpy},
    l{_cpy_1}
),
PROG(
    prev[52],
    ins[53],
    next[54]
),
LBL(
    prog[53],
    l{exp_loop}
),
PROG(
    prev[54],
    ins[55],
    next[56]
),
CLR(
    prog[55],
    r{rdx}
),
PROG(
    prev[56],
    ins[57],
    next[58]
),
MOV(
    prog[57],
    src{rcx},
    dst{_cpy}
),
PROG(
    prev[58],
    ins[59],
    next[60]
),
LBL(
    prog[59],
    l{_cpy_2}
),
PROG(
    prev[60],
    ins[61],
    next[62]
),
INC(
    prog[61],
    r{rcx}
),
PROG(
    prev[62],
    ins[63],
    next[64]
),
INC(
    prog[63],
    r{rdx}
),
PROG(
    prev[64],
    ins[65],
    next[66]
),
DEC(
    prog[65],
    r{_cpy}
),
PROG(
    prev[66],
    ins[67],
    next[68]
),
JNZ(
    prog[67],
    r{_cpy},
    l{_cpy_2}
),
PROG(
    prev[68],
    ins[69],
    next[70]
),
MOV(
    prog[69],
    src{rbx},
    dst{_mul1}
),
PROG(
    prev[70],
    ins[71],
    next[72]
),
CLR(
    prog[71],
    r{_mul2}
),
PROG(
    prev[72],
    ins[73],
    next[74]
),
MOV(
    prog[73],
    src{_mul1},
    dst{_cpy}
),
PROG(
    prev[74],
    ins[75],
    next[76]
),
LBL(
    prog[75],
    l{_cpy_3}
),
PROG(
    prev[76],
    ins[77],
    next[78]
),
INC(
    prog[77],
    r{_mul1}
),
PROG(
    prev[78],
    ins[79],
    next[80]
),
INC(
    prog[79],
    r{_mul2}
),
PROG(
    prev[80],
    ins[81],
    next[82]
),
DEC(
    prog[81],
    r{_cpy}
),
PROG(
    prev[82],
    ins[83],
    next[84]
),
JNZ(
    prog[83],
    r{_cpy},
    l{_cpy_3}
),
PROG(
    prev[84],
    ins[85],
    next[86]
),
LBL(
    prog[85],
    l{_mov_1_loop}
),
PROG(
    prev[86],
    ins[87],
    next[88]
),
JZ(
    prog[87],
    r{rdx},
    l{_mov_1_after}
),
PROG(
    prev[88],
    ins[89],
    next[90]
),
DEC(
    prog[89],
    r{rdx}
),
PROG(
    prev[90],
    ins[91],
    next[92]
),
ADD(
    prog[91],
    src{_mul1},
    dst{rbx}
),
PROG(
    prev[92],
    ins[93],
    next[94]
),
CLR(
    prog[93],
    r{_mul1}
),
PROG(
    prev[94],
    ins[95],
    next[96]
),
MOV(
    prog[95],
    src{_mul2},
    dst{_cpy}
),
PROG(
    prev[96],
    ins[97],
    next[98]
),
LBL(
    prog[97],
    l{_cpy_4}
),
PROG(
    prev[98],
    ins[99],
    next[100]
),
INC(
    prog[99],
    r{_mul2}
),
PROG(
    prev[100],
    ins[101],
    next[102]
),
INC(
    prog[101],
    r{_mul1}
),
PROG(
    prev[102],
    ins[103],
    next[104]
),
DEC(
    prog[103],
    r{_cpy}
),
PROG(
    prev[104],
    ins[105],
    next[106]
),
JNZ(
    prog[105],
    r{_cpy},
    l{_cpy_4}
),
PROG(
    prev[106],
    ins[107],
    next[108]
),
JMP(
    prog[107],
    l{_mov_1_loop}
),
PROG(
    prev[108],
    ins[109],
    next[110]
),
LBL(
    prog[109],
    l{_mov_1_after}
),
PROG(
    prev[110],
    ins[111],
    next[112]
),
CLR(
    prog[111],
    r{_mul1}
),
PROG(
    prev[112],
    ins[113],
    next[114]
),
CLR(
    prog[113],
    r{_mul2}
),
PROG(
    prev[114],
    ins[115],
    next[116]
),
DEC(
    prog[115],
    r{rax}
),
PROG(
    prev[116],
    ins[117],
    next[118]
),
JNZ(
    prog[117],
    r{rax},
    l{exp_loop}
),
PROG(
    prev[118],
    ins[119],
    next[120]
),
LBL(
    prog[119],
    l{exp_after}
),
PROG(
    prev[120],
    ins[121],
    next[122]
),
CLR(
    prog[121],
    r{rcx}
),
PROG(
    prev[122],
    ins[123]
),
CLR(
    prog[123],
    r{rdx}
)

%obs: 'rbx' |UNIT(
    r{rbx}
)|
%obs: 'rax' |UNIT(
    r{rax}
)|
%obs: 'rcx' |UNIT(
    r{rcx}
)|
%obs: 'rdx' |UNIT(
    r{rdx}
)|

